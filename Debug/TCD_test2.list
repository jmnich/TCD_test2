
TCD_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e5c  08006e5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e64  08006e64  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e64  08006e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cacc  20000078  08006ee4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cb44  08006ee4  0002cb44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb58  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f72  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001838  00000000  00000000  00040b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  000423b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000067d5  00000000  00000000  00043a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b2c  00000000  00000000  0004a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103828  00000000  00000000  0005dd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006730  00000000  00000000  001615b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006dac 	.word	0x08006dac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08006dac 	.word	0x08006dac

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <MX_GPIO_Init+0x90>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <MX_GPIO_Init+0x90>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_GPIO_Init+0x90>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_GPIO_Init+0x90>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_GPIO_Init+0x90>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_GPIO_Init+0x90>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_GPIO_Init+0x90>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <MX_GPIO_Init+0x90>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_GPIO_Init+0x90>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <MX_GPIO_Init+0x94>)
 8000586:	f000 fe1f 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800058a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800058e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_GPIO_Init+0x94>)
 80005a4:	f000 fc8e 	bl	8000ec4 <HAL_GPIO_Init>

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48001400 	.word	0x48001400

080005b8 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <_Z16MX_FREERTOS_Initv+0x2c>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	682b      	ldr	r3, [r5, #0]
 80005ca:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fd27 	bl	8004024 <osThreadCreate>
 80005d6:	4602      	mov	r2, r0
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <_Z16MX_FREERTOS_Initv+0x30>)
 80005da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005dc:	bf00      	nop
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bdb0      	pop	{r4, r5, r7, pc}
 80005e4:	08006dd0 	.word	0x08006dd0
 80005e8:	20000094 	.word	0x20000094

080005ec <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <_Z16StartDefaultTaskPKv+0x1c>)
 80005fa:	f000 fdfd 	bl	80011f8 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000602:	f003 fd36 	bl	8004072 <osDelay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000606:	e7f5      	b.n	80005f4 <_Z16StartDefaultTaskPKv+0x8>
 8000608:	48001400 	.word	0x48001400

0800060c <_Znwj>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void * operator new( size_t size )
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f006 f953 	bl	80068c0 <pvPortMalloc>
 800061a:	4603      	mov	r3, r0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <_Znaj>:

void * operator new[]( size_t size )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    return pvPortMalloc( size );
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f006 f947 	bl	80068c0 <pvPortMalloc>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZdlPv>:

void operator delete( void * ptr )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    vPortFree( ptr );
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f006 f9fd 	bl	8006a44 <vPortFree>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <_Z4led2P10ObservablePv>:
void operator delete[]( void * ptr )
{
    vPortFree( ptr );
}

void led2(Observable * o, void * d) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800065e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <_Z4led2P10ObservablePv+0x34>)
 8000664:	f000 fdc8 	bl	80011f8 <HAL_GPIO_TogglePin>
	char * s = (char *)d;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	60fb      	str	r3, [r7, #12]
	uart_wrap->sendString((const char *)s);
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <_Z4led2P10ObservablePv+0x38>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68f9      	ldr	r1, [r7, #12]
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fb34 	bl	8003ce0 <_ZN12UART_Wrapper10sendStringEPKc>
	delete s;
 8000678:	2101      	movs	r1, #1
 800067a:	68f8      	ldr	r0, [r7, #12]
 800067c:	f006 faf9 	bl	8006c72 <_ZdlPvj>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	48001400 	.word	0x48001400
 800068c:	20000098 	.word	0x20000098

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f000 fa96 	bl	8000bc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f83d 	bl	8000718 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f7ff ff3f 	bl	8000520 <MX_GPIO_Init>
  MX_UART4_Init();
 80006a2:	f000 f9cf 	bl	8000a44 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  int subsArraySize = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	60fb      	str	r3, [r7, #12]

  void(**subsArray)(Observable*, void*) =
		  (void(**)(Observable*, void*))pvPortMalloc(subsArraySize * sizeof(subsArray));
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 f906 	bl	80068c0 <pvPortMalloc>
 80006b4:	60b8      	str	r0, [r7, #8]

  uint8_t * rxbuf = new uint8_t[1024];
 80006b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80006ba:	f7ff ffb3 	bl	8000624 <_Znaj>
 80006be:	4603      	mov	r3, r0
 80006c0:	607b      	str	r3, [r7, #4]
  uint32_t rxBufSize = 1024;
 80006c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c6:	603b      	str	r3, [r7, #0]
  uart_wrap = new UART_Wrapper(&huart4, rxbuf, rxBufSize, subsArray, subsArraySize);
 80006c8:	2030      	movs	r0, #48	; 0x30
 80006ca:	f7ff ff9f 	bl	800060c <_Znwj>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461c      	mov	r4, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	490b      	ldr	r1, [pc, #44]	; (800070c <main+0x7c>)
 80006e0:	4620      	mov	r0, r4
 80006e2:	f003 fa3d 	bl	8003b60 <_ZN12UART_WrapperC1EP20__UART_HandleTypeDefPhmPPFvP10ObservablePvEi>
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <main+0x80>)
 80006e8:	601c      	str	r4, [r3, #0]
  uart_wrap->subscribe(&led2);
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <main+0x80>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3308      	adds	r3, #8
 80006f0:	4908      	ldr	r1, [pc, #32]	; (8000714 <main+0x84>)
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f9d0 	bl	8003a98 <_ZN10Observable9subscribeEPFvPS_PvE>
  uart_wrap->startRx();
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <main+0x80>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fb07 	bl	8003d10 <_ZN12UART_Wrapper7startRxEv>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000702:	f7ff ff59 	bl	80005b8 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8000706:	f003 fc86 	bl	8004016 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x7a>
 800070c:	2000ca70 	.word	0x2000ca70
 8000710:	20000098 	.word	0x20000098
 8000714:	08000655 	.word	0x08000655

08000718 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b0a8      	sub	sp, #160	; 0xa0
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000722:	2238      	movs	r2, #56	; 0x38
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f006 faf3 	bl	8006d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2254      	movs	r2, #84	; 0x54
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fae5 	bl	8006d12 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fd6f 	bl	800122c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000756:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	2303      	movs	r3, #3
 8000760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000764:	2301      	movs	r3, #1
 8000766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 34;
 800076a:	2322      	movs	r3, #34	; 0x22
 800076c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe04 	bl	8001394 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800079c:	f000 f852 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2303      	movs	r3, #3
 80007a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007b8:	2104      	movs	r1, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f902 	bl	80019c4 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf14      	ite	ne
 80007c6:	2301      	movne	r3, #1
 80007c8:	2300      	moveq	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80007d0:	f000 f838 	bl	8000844 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80007d4:	2308      	movs	r3, #8
 80007d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fb3e 	bl	8001e60 <HAL_RCCEx_PeriphCLKConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <_Z18SystemClock_Configv+0xe0>
  {
    Error_Handler();
 80007f4:	f000 f826 	bl	8000844 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	37a0      	adds	r7, #160	; 0xa0
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

	uart_wrap->rxCallback();
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_UART_RxCpltCallback+0x1c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fb1b 	bl	8003e48 <_ZN12UART_Wrapper10rxCallbackEv>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000098 	.word	0x20000098

08000820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000832:	f000 f9e1 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084a:	e7fe      	b.n	800084a <Error_Handler+0x6>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x50>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <HAL_MspInit+0x50>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6613      	str	r3, [r2, #96]	; 0x60
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x50>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x50>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <HAL_MspInit+0x50>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_MspInit+0x50>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa8b 	bl	8000da4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800088e:	f000 fd71 	bl	8001374 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_InitTick+0xcc>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	4a2c      	ldr	r2, [pc, #176]	; (800096c <HAL_InitTick+0xcc>)
 80008bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008c0:	6613      	str	r3, [r2, #96]	; 0x60
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <HAL_InitTick+0xcc>)
 80008c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ce:	f107 020c 	add.w	r2, r7, #12
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fa49 	bl	8001d70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008de:	f001 fa31 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 80008e2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	4a22      	ldr	r2, [pc, #136]	; (8000970 <HAL_InitTick+0xd0>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	0c9b      	lsrs	r3, r3, #18
 80008ee:	3b01      	subs	r3, #1
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <HAL_InitTick+0xd4>)
 80008f4:	4a20      	ldr	r2, [pc, #128]	; (8000978 <HAL_InitTick+0xd8>)
 80008f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_InitTick+0xd4>)
 80008fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fe:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <HAL_InitTick+0xd4>)
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_InitTick+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_InitTick+0xd4>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <HAL_InitTick+0xd4>)
 8000914:	f001 fcf0 	bl	80022f8 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800091e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11b      	bne.n	800095e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <HAL_InitTick+0xd4>)
 8000928:	f001 fd48 	bl	80023bc <HAL_TIM_Base_Start_IT>
 800092c:	4603      	mov	r3, r0
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000936:	2b00      	cmp	r3, #0
 8000938:	d111      	bne.n	800095e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800093a:	2019      	movs	r0, #25
 800093c:	f000 fa4c 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b0f      	cmp	r3, #15
 8000944:	d808      	bhi.n	8000958 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000946:	2200      	movs	r2, #0
 8000948:	6879      	ldr	r1, [r7, #4]
 800094a:	2019      	movs	r0, #25
 800094c:	f000 fa2a 	bl	8000da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_InitTick+0xdc>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	e002      	b.n	800095e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 800095e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000962:	4618      	mov	r0, r3
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	431bde83 	.word	0x431bde83
 8000974:	2000ca24 	.word	0x2000ca24
 8000978:	40012c00 	.word	0x40012c00
 800097c:	20000004 	.word	0x20000004

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009b2:	f001 fd7b 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000ca24 	.word	0x2000ca24

080009c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <UART4_IRQHandler+0x10>)
 80009c6:	f002 f8ed 	bl	8002ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000ca70 	.word	0x2000ca70

080009d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	return 1;
 80009d8:	2301      	movs	r3, #1
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_kill>:

int _kill(int pid, int sig)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009ee:	f006 f95b 	bl	8006ca8 <__errno>
 80009f2:	4602      	mov	r2, r0
 80009f4:	2316      	movs	r3, #22
 80009f6:	6013      	str	r3, [r2, #0]
	return -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_exit>:

void _exit (int status)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ffe7 	bl	80009e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a16:	e7fe      	b.n	8000a16 <_exit+0x12>

08000a18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SystemInit+0x28>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SystemInit+0x28>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SystemInit+0x28>)
 8000a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a32:	609a      	str	r2, [r3, #8]
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <MX_UART4_Init+0x94>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a50:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a8c:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000a8e:	f001 ffa3 	bl	80029d8 <HAL_UART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a98:	f7ff fed4 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000aa0:	f002 fefc 	bl	800389c <HAL_UARTEx_SetTxFifoThreshold>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000aaa:	f7ff fecb 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000ab2:	f002 ff31 	bl	8003918 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000abc:	f7ff fec2 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_UART4_Init+0x90>)
 8000ac2:	f002 feb0 	bl	8003826 <HAL_UARTEx_EnableFifoMode>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f7ff feba 	bl	8000844 <Error_Handler>
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000ca70 	.word	0x2000ca70
 8000ad8:	40004c00 	.word	0x40004c00

08000adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_UART_MspInit+0x8c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d130      	bne.n	8000b60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_UART_MspInit+0x90>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_UART_MspInit+0x90>)
 8000b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_UART_MspInit+0x90>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_UART_MspInit+0x90>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_UART_MspInit+0x90>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_UART_MspInit+0x90>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000b40:	2305      	movs	r3, #5
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4809      	ldr	r0, [pc, #36]	; (8000b70 <HAL_UART_MspInit+0x94>)
 8000b4c:	f000 f9ba 	bl	8000ec4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2105      	movs	r1, #5
 8000b54:	2034      	movs	r0, #52	; 0x34
 8000b56:	f000 f925 	bl	8000da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b5a:	2034      	movs	r0, #52	; 0x34
 8000b5c:	f000 f93c 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40004c00 	.word	0x40004c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000800 	.word	0x48000800

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b9e:	f7ff ff3b 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f006 f887 	bl	8006cb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fd73 	bl	8000690 <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bb8:	08006e6c 	.word	0x08006e6c
  ldr r2, =_sbss
 8000bbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bc0:	2000cb44 	.word	0x2000cb44

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>

08000bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f8dc 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fe62 	bl	80008a0 <HAL_InitTick>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	e001      	b.n	8000bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be8:	f7ff fe30 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bec:	79fb      	ldrb	r3, [r7, #7]

}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x1c>)
 8000c08:	6013      	str	r3, [r2, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	2000cafc 	.word	0x2000cafc
 8000c18:	20000008 	.word	0x20000008

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2000cafc 	.word	0x2000cafc

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db2:	f7ff ff63 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000db6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff ffb3 	bl	8000d28 <NVIC_EncodePriority>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff82 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff56 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2204      	movs	r2, #4
 8000e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e047      	b.n	8000eb8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 020e 	bic.w	r2, r2, #14
 8000e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	2101      	movs	r1, #1
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00c      	beq.n	8000e98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	4798      	blx	r3
    }
  }
  return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ed2:	e15a      	b.n	800118a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 814c 	beq.w	8001184 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d00b      	beq.n	8000f0c <HAL_GPIO_Init+0x48>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d007      	beq.n	8000f0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	2b11      	cmp	r3, #17
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b12      	cmp	r3, #18
 8000f0a:	d130      	bne.n	8000f6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f42:	2201      	movs	r2, #1
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	091b      	lsrs	r3, r3, #4
 8000f58:	f003 0201 	and.w	r2, r3, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0xea>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d123      	bne.n	8000ff6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0203 	and.w	r2, r3, #3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 80a6 	beq.w	8001184 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001038:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	4a5a      	ldr	r2, [pc, #360]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6613      	str	r3, [r2, #96]	; 0x60
 8001044:	4b58      	ldr	r3, [pc, #352]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001050:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800107a:	d01f      	beq.n	80010bc <HAL_GPIO_Init+0x1f8>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x2ec>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d019      	beq.n	80010b8 <HAL_GPIO_Init+0x1f4>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d013      	beq.n	80010b4 <HAL_GPIO_Init+0x1f0>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_GPIO_Init+0x2f4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1ec>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2f8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1e8>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2fc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1e4>
 80010a4:	2305      	movs	r3, #5
 80010a6:	e00a      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010a8:	2306      	movs	r3, #6
 80010aa:	e008      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e006      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e004      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e002      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <HAL_GPIO_Init+0x1fa>
 80010bc:	2300      	movs	r3, #0
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	f002 0203 	and.w	r2, r2, #3
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	4093      	lsls	r3, r2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ce:	4937      	ldr	r1, [pc, #220]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	3302      	adds	r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_GPIO_Init+0x300>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001100:	4a30      	ldr	r2, [pc, #192]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117e:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f47f ae9d 	bne.w	8000ed4 <HAL_GPIO_Init+0x10>
  }
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000c00 	.word	0x48000c00
 80011bc:	48001000 	.word	0x48001000
 80011c0:	48001400 	.word	0x48001400
 80011c4:	40010400 	.word	0x40010400

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43d9      	mvns	r1, r3
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	400b      	ands	r3, r1
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d141      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001246:	d131      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124e:	4a46      	ldr	r2, [pc, #280]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001260:	4a41      	ldr	r2, [pc, #260]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2232      	movs	r2, #50	; 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a3f      	ldr	r2, [pc, #252]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d102      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d158      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e057      	b.n	800135c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012bc:	e04d      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c4:	d141      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d2:	d131      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ec:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2232      	movs	r2, #50	; 0x32
 80012fa:	fb02 f303 	mul.w	r3, r2, r3
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	0c9b      	lsrs	r3, r3, #18
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130a:	e002      	b.n	8001312 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3b01      	subs	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131e:	d102      	bne.n	8001326 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f2      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001332:	d112      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e011      	b.n	800135c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001348:	e007      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001358:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40007000 	.word	0x40007000
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800137e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001382:	6093      	str	r3, [r2, #8]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40007000 	.word	0x40007000

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e308      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d075      	beq.n	800149e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4ba3      	ldr	r3, [pc, #652]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013bc:	4ba0      	ldr	r3, [pc, #640]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d102      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3e>
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d002      	beq.n	80013d8 <HAL_RCC_OscConfig+0x44>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d10b      	bne.n	80013f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4b99      	ldr	r3, [pc, #612]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d05b      	beq.n	800149c <HAL_RCC_OscConfig+0x108>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d157      	bne.n	800149c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e2e3      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_OscConfig+0x74>
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a90      	ldr	r2, [pc, #576]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xb0>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x98>
 8001412:	4b8b      	ldr	r3, [pc, #556]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a8a      	ldr	r2, [pc, #552]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xb0>
 800142c:	4b84      	ldr	r3, [pc, #528]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a83      	ldr	r2, [pc, #524]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a80      	ldr	r2, [pc, #512]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fbe6 	bl	8000c1c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fbe2 	bl	8000c1c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e2a8      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0xc0>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fbd2 	bl	8000c1c <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fbce 	bl	8000c1c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e294      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148e:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0xe8>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d075      	beq.n	8001596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b0c      	cmp	r3, #12
 80014c2:	d102      	bne.n	80014ca <HAL_RCC_OscConfig+0x136>
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d002      	beq.n	80014d0 <HAL_RCC_OscConfig+0x13c>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d11f      	bne.n	8001510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x154>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e267      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	4952      	ldr	r1, [pc, #328]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x2b0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f9cd 	bl	80008a0 <HAL_InitTick>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d043      	beq.n	8001594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e253      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fb7a 	bl	8000c1c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fb76 	bl	8000c1c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e23c      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	4b40      	ldr	r3, [pc, #256]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	4939      	ldr	r1, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
 800155e:	e01a      	b.n	8001596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a36      	ldr	r2, [pc, #216]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb56 	bl	8000c1c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fb52 	bl	8000c1c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e218      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001586:	4b2e      	ldr	r3, [pc, #184]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1e0>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d03c      	beq.n	800161c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb2f 	bl	8000c1c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb2b 	bl	8000c1c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1f1      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ef      	beq.n	80015c2 <HAL_RCC_OscConfig+0x22e>
 80015e2:	e01b      	b.n	800161c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb12 	bl	8000c1c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb0e 	bl	8000c1c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1d4      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ef      	bne.n	80015fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80ab 	beq.w	8001780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x2b4>
 800163a:	2301      	movs	r3, #1
 800163c:	e005      	b.n	800164a <HAL_RCC_OscConfig+0x2b6>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	20000004 	.word	0x20000004
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00d      	beq.n	800166a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4baf      	ldr	r3, [pc, #700]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4aae      	ldr	r2, [pc, #696]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4bac      	ldr	r3, [pc, #688]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166a:	4ba9      	ldr	r3, [pc, #676]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001676:	4ba6      	ldr	r3, [pc, #664]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4aa5      	ldr	r2, [pc, #660]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff facb 	bl	8000c1c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fac7 	bl	8000c1c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e18d      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x57c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_RCC_OscConfig+0x32e>
 80016b0:	4b96      	ldr	r3, [pc, #600]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a95      	ldr	r2, [pc, #596]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c0:	e024      	b.n	800170c <HAL_RCC_OscConfig+0x378>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d110      	bne.n	80016ec <HAL_RCC_OscConfig+0x358>
 80016ca:	4b90      	ldr	r3, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	4a8e      	ldr	r2, [pc, #568]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016da:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e0:	4a8a      	ldr	r2, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ea:	e00f      	b.n	800170c <HAL_RCC_OscConfig+0x378>
 80016ec:	4b87      	ldr	r3, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a86      	ldr	r2, [pc, #536]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	4b83      	ldr	r3, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	4a82      	ldr	r2, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d016      	beq.n	8001742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fa82 	bl	8000c1c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff fa7e 	bl	8000c1c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e142      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ed      	beq.n	800171c <HAL_RCC_OscConfig+0x388>
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fa6b 	bl	8000c1c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa67 	bl	8000c1c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e12b      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001760:	4b6a      	ldr	r3, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ed      	bne.n	800174a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a64      	ldr	r2, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800177a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03c      	beq.n	8001806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01c      	beq.n	80017ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001794:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800179a:	4a5c      	ldr	r2, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fa3a 	bl	8000c1c <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ac:	f7ff fa36 	bl	8000c1c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0fc      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0ef      	beq.n	80017ac <HAL_RCC_OscConfig+0x418>
 80017cc:	e01b      	b.n	8001806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d4:	4a4d      	ldr	r2, [pc, #308]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fa1d 	bl	8000c1c <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017e6:	f7ff fa19 	bl	8000c1c <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0df      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f8:	4b44      	ldr	r3, [pc, #272]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80017fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ef      	bne.n	80017e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80d3 	beq.w	80019b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b0c      	cmp	r3, #12
 800181a:	f000 808d 	beq.w	8001938 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d15a      	bne.n	80018dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a38      	ldr	r2, [pc, #224]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800182c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f9f3 	bl	8000c1c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff f9ef 	bl	8000c1c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e0b5      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x580>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6a11      	ldr	r1, [r2, #32]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001868:	3a01      	subs	r2, #1
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	4311      	orrs	r1, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001872:	0212      	lsls	r2, r2, #8
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800187a:	0852      	lsrs	r2, r2, #1
 800187c:	3a01      	subs	r2, #1
 800187e:	0552      	lsls	r2, r2, #21
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001886:	0852      	lsrs	r2, r2, #1
 8001888:	3a01      	subs	r2, #1
 800188a:	0652      	lsls	r2, r2, #25
 800188c:	4311      	orrs	r1, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001892:	06d2      	lsls	r2, r2, #27
 8001894:	430a      	orrs	r2, r1
 8001896:	491d      	ldr	r1, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x578>)
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x578>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1a      	ldr	r2, [pc, #104]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff f9b2 	bl	8000c1c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff f9ae 	bl	8000c1c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e074      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x528>
 80018da:	e06c      	b.n	80019b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_RCC_OscConfig+0x578>)
 80018fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f98a 	bl	8000c1c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	e00e      	b.n	800192a <HAL_RCC_OscConfig+0x596>
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f980 	bl	8000c1c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e046      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_OscConfig+0x62c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x584>
 8001936:	e03e      	b.n	80019b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e039      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_OscConfig+0x62c>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	d12c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d123      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e11e      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b91      	ldr	r3, [pc, #580]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b8e      	ldr	r3, [pc, #568]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 020f 	bic.w	r2, r3, #15
 80019f2:	498c      	ldr	r1, [pc, #560]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b8a      	ldr	r3, [pc, #552]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e106      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d073      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d129      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a20:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0f4      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a30:	f000 f9d0 	bl	8001dd4 <RCC_GetSysClockFreqFromPLLSource>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4a7c      	ldr	r2, [pc, #496]	; (8001c2c <HAL_RCC_ClockConfig+0x268>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d93f      	bls.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a3e:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d033      	beq.n	8001abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d12f      	bne.n	8001abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a66:	4a70      	ldr	r2, [pc, #448]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e024      	b.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7c:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0c6      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0be      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a9c:	f000 f8ce 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4a61      	ldr	r2, [pc, #388]	; (8001c2c <HAL_RCC_ClockConfig+0x268>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d909      	bls.n	8001abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aaa:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4957      	ldr	r1, [pc, #348]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f8a4 	bl	8000c1c <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff f8a0 	bl	8000c1c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e095      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d023      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b30:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b38:	4a3b      	ldr	r2, [pc, #236]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4936      	ldr	r1, [pc, #216]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b80      	cmp	r3, #128	; 0x80
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d21d      	bcs.n	8001bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 020f 	bic.w	r2, r3, #15
 8001b7c:	4929      	ldr	r1, [pc, #164]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b84:	f7ff f84a 	bl	8000c1c <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff f846 	bl	8000c1c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e03b      	b.n	8001c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d1ed      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4917      	ldr	r1, [pc, #92]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	490f      	ldr	r1, [pc, #60]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bee:	f000 f825 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_RCC_ClockConfig+0x264>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_RCC_ClockConfig+0x26c>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	fa21 f303 	lsr.w	r3, r1, r3
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x270>)
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fe44 	bl	80008a0 <HAL_InitTick>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	04c4b400 	.word	0x04c4b400
 8001c30:	08006e14 	.word	0x08006e14
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c42:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e047      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e03e      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c66:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d136      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3301      	adds	r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d10c      	bne.n	8001caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c90:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9a:	68d2      	ldr	r2, [r2, #12]
 8001c9c:	0a12      	lsrs	r2, r2, #8
 8001c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
      break;
 8001ca8:	e00c      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	0a12      	lsrs	r2, r2, #8
 8001cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0e5b      	lsrs	r3, r3, #25
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e001      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ce4:	693b      	ldr	r3, [r7, #16]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	00989680 	.word	0x00989680

08001d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4601      	mov	r1, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08006e24 	.word	0x08006e24

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d48:	f7ff ffda 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d5a:	5cd3      	ldrb	r3, [r2, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08006e24 	.word	0x08006e24

08001d70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_GetClockConfig+0x5c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	08db      	lsrs	r3, r3, #3
 8001daa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCC_GetClockConfig+0x60>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d10c      	bne.n	8001e12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e02:	68d2      	ldr	r2, [r2, #12]
 8001e04:	0a12      	lsrs	r2, r2, #8
 8001e06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
    break;
 8001e10:	e00c      	b.n	8001e2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1c:	68d2      	ldr	r2, [r2, #12]
 8001e1e:	0a12      	lsrs	r2, r2, #8
 8001e20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    break;
 8001e2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0e5b      	lsrs	r3, r3, #25
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	3301      	adds	r3, #1
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e46:	687b      	ldr	r3, [r7, #4]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	00989680 	.word	0x00989680
 8001e5c:	00f42400 	.word	0x00f42400

08001e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8098 	beq.w	8001fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a3f      	ldr	r2, [pc, #252]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a39      	ldr	r2, [pc, #228]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe feb1 	bl	8000c1c <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe fead 	bl	8000c1c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d902      	bls.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed0:	e005      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ef      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d159      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01e      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d019      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fe6d 	bl	8000c1c <HAL_GetTick>
 8001f42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f44:	e00b      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fe69 	bl	8000c1c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d902      	bls.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f5c:	e006      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ec      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f80:	4903      	ldr	r1, [pc, #12]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f88:	e008      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	74bb      	strb	r3, [r7, #18]
 8001f8e:	e005      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9c:	7c7b      	ldrb	r3, [r7, #17]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d105      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4baf      	ldr	r3, [pc, #700]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4aae      	ldr	r2, [pc, #696]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4ba9      	ldr	r3, [pc, #676]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	f023 0203 	bic.w	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	49a5      	ldr	r1, [pc, #660]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fdc:	4ba0      	ldr	r3, [pc, #640]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f023 020c 	bic.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	499d      	ldr	r1, [pc, #628]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ffe:	4b98      	ldr	r3, [pc, #608]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4994      	ldr	r1, [pc, #592]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002020:	4b8f      	ldr	r3, [pc, #572]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	498c      	ldr	r1, [pc, #560]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002042:	4b87      	ldr	r3, [pc, #540]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	4983      	ldr	r1, [pc, #524]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	497b      	ldr	r1, [pc, #492]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002086:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4972      	ldr	r1, [pc, #456]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020a8:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	496a      	ldr	r1, [pc, #424]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ca:	4b65      	ldr	r3, [pc, #404]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	4961      	ldr	r1, [pc, #388]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020ec:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	4959      	ldr	r1, [pc, #356]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	4950      	ldr	r1, [pc, #320]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4948      	ldr	r1, [pc, #288]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214e:	d105      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002150:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a42      	ldr	r2, [pc, #264]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002164:	2b00      	cmp	r3, #0
 8002166:	d015      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002168:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	493a      	ldr	r1, [pc, #232]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002186:	d105      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a34      	ldr	r2, [pc, #208]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800218e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002192:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d015      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	492c      	ldr	r1, [pc, #176]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021be:	d105      	bne.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	491e      	ldr	r1, [pc, #120]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4910      	ldr	r1, [pc, #64]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d018      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4902      	ldr	r1, [pc, #8]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800225e:	e001      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002260:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800226c:	d105      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d015      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002294:	4917      	ldr	r1, [pc, #92]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a4:	d105      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80022c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	4909      	ldr	r1, [pc, #36]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022dc:	d105      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000

080022f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e049      	b.n	800239e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f841 	bl	80023a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f000 fa60 	bl	80027fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d001      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e054      	b.n	800247e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_TIM_Base_Start_IT+0xd0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d022      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fe:	d01d      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_TIM_Base_Start_IT+0xd4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d018      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_TIM_Base_Start_IT+0xd8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <HAL_TIM_Base_Start_IT+0xdc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_TIM_Base_Start_IT+0xe0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x80>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d115      	bne.n	8002468 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_TIM_Base_Start_IT+0xec>)
 8002444:	4013      	ands	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b06      	cmp	r3, #6
 800244c:	d015      	beq.n	800247a <HAL_TIM_Base_Start_IT+0xbe>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d011      	beq.n	800247a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002466:	e008      	b.n	800247a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e000      	b.n	800247c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800
 8002498:	40000c00 	.word	0x40000c00
 800249c:	40013400 	.word	0x40013400
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40015000 	.word	0x40015000
 80024a8:	00010007 	.word	0x00010007

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f965 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f957 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f968 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f93b 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f92d 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f93e 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f911 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f903 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f914 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f8e7 	bl	80027be <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8d9 	bl	80027aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8ea 	bl	80027d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe f8f8 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f982 	bl	8002960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266a:	d10e      	bne.n	800268a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d107      	bne.n	800268a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f975 	bl	8002974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d10e      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d107      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f898 	bl	80027e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d10e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d107      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0220 	mvn.w	r2, #32
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f935 	bl	800294c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026f0:	d10f      	bne.n	8002712 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002700:	d107      	bne.n	8002712 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800270a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f93b 	bl	8002988 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002720:	d10f      	bne.n	8002742 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002730:	d107      	bne.n	8002742 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800273a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f92d 	bl	800299c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002750:	d10f      	bne.n	8002772 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002760:	d107      	bne.n	8002772 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800276a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f91f 	bl	80029b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800277c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002780:	d10f      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002790:	d107      	bne.n	80027a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800279a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f911 	bl	80029c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a46      	ldr	r2, [pc, #280]	; (8002928 <TIM_Base_SetConfig+0x12c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d017      	beq.n	8002844 <TIM_Base_SetConfig+0x48>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d013      	beq.n	8002844 <TIM_Base_SetConfig+0x48>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a43      	ldr	r2, [pc, #268]	; (800292c <TIM_Base_SetConfig+0x130>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00f      	beq.n	8002844 <TIM_Base_SetConfig+0x48>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a42      	ldr	r2, [pc, #264]	; (8002930 <TIM_Base_SetConfig+0x134>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00b      	beq.n	8002844 <TIM_Base_SetConfig+0x48>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a41      	ldr	r2, [pc, #260]	; (8002934 <TIM_Base_SetConfig+0x138>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <TIM_Base_SetConfig+0x48>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a40      	ldr	r2, [pc, #256]	; (8002938 <TIM_Base_SetConfig+0x13c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_Base_SetConfig+0x48>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3f      	ldr	r2, [pc, #252]	; (800293c <TIM_Base_SetConfig+0x140>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d108      	bne.n	8002856 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a33      	ldr	r2, [pc, #204]	; (8002928 <TIM_Base_SetConfig+0x12c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d023      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d01f      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a30      	ldr	r2, [pc, #192]	; (800292c <TIM_Base_SetConfig+0x130>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01b      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a2f      	ldr	r2, [pc, #188]	; (8002930 <TIM_Base_SetConfig+0x134>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d017      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <TIM_Base_SetConfig+0x138>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a2d      	ldr	r2, [pc, #180]	; (8002938 <TIM_Base_SetConfig+0x13c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00f      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2d      	ldr	r2, [pc, #180]	; (8002940 <TIM_Base_SetConfig+0x144>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d00b      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <TIM_Base_SetConfig+0x148>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <TIM_Base_SetConfig+0x14c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d003      	beq.n	80028a6 <TIM_Base_SetConfig+0xaa>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a26      	ldr	r2, [pc, #152]	; (800293c <TIM_Base_SetConfig+0x140>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <TIM_Base_SetConfig+0x12c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <TIM_Base_SetConfig+0x110>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <TIM_Base_SetConfig+0x13c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00f      	beq.n	800290c <TIM_Base_SetConfig+0x110>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <TIM_Base_SetConfig+0x144>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00b      	beq.n	800290c <TIM_Base_SetConfig+0x110>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <TIM_Base_SetConfig+0x148>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <TIM_Base_SetConfig+0x110>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <TIM_Base_SetConfig+0x14c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <TIM_Base_SetConfig+0x110>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0d      	ldr	r2, [pc, #52]	; (800293c <TIM_Base_SetConfig+0x140>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	615a      	str	r2, [r3, #20]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800
 8002934:	40000c00 	.word	0x40000c00
 8002938:	40013400 	.word	0x40013400
 800293c:	40015000 	.word	0x40015000
 8002940:	40014000 	.word	0x40014000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800

0800294c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e042      	b.n	8002a70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d106      	bne.n	8002a02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe f86d 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2224      	movs	r2, #36	; 0x24
 8002a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa56 	bl	8002ecc <UART_SetConfig>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e022      	b.n	8002a70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fd1c 	bl	8003470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fda3 	bl	80035b4 <UART_CheckIdleState>
 8002a6e:	4603      	mov	r3, r0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	f040 8083 	bne.w	8002b9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Transmit+0x28>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e07b      	b.n	8002b9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Transmit+0x3a>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e074      	b.n	8002b9c <HAL_UART_Transmit+0x124>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe f8a7 	bl	8000c1c <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d108      	bne.n	8002afc <HAL_UART_Transmit+0x84>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	e003      	b.n	8002b04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8002b0c:	e02c      	b.n	8002b68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fd93 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e039      	b.n	8002b9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e007      	b.n	8002b56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	3301      	adds	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1cc      	bne.n	8002b0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2140      	movs	r1, #64	; 0x40
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fd60 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e006      	b.n	8002b9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d118      	bne.n	8002c06 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d013      	beq.n	8002c06 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8145 	beq.w	8002e86 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
      }
      return;
 8002c04:	e13f      	b.n	8002e86 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80e8 	beq.w	8002dde <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4ba1      	ldr	r3, [pc, #644]	; (8002e98 <HAL_UART_IRQHandler+0x2f4>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4ba0      	ldr	r3, [pc, #640]	; (8002e9c <HAL_UART_IRQHandler+0x2f8>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80dd 	beq.w	8002dde <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_UART_IRQHandler+0xac>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d010      	beq.n	8002c7c <HAL_UART_IRQHandler+0xd8>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d010      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x104>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4b76      	ldr	r3, [pc, #472]	; (8002e98 <HAL_UART_IRQHandler+0x2f4>)
 8002cc0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f043 0208 	orr.w	r2, r3, #8
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d011      	beq.n	8002d0c <HAL_UART_IRQHandler+0x168>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00c      	beq.n	8002d0c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b9 	beq.w	8002e8a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d011      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d004      	beq.n	8002d66 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d031      	beq.n	8002dca <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fcec 	bl	8003744 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d123      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d013      	beq.n	8002dba <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d96:	4a42      	ldr	r2, [pc, #264]	; (8002ea0 <HAL_UART_IRQHandler+0x2fc>)
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe f828 	bl	8000df4 <HAL_DMA_Abort_IT>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8002db4:	4610      	mov	r0, r2
 8002db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	e00f      	b.n	8002dda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f87c 	bl	8002eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e00b      	b.n	8002dda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f878 	bl	8002eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc8:	e007      	b.n	8002dda <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f874 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8002dd8:	e057      	b.n	8002e8a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dda:	bf00      	nop
    return;
 8002ddc:	e055      	b.n	8002e8a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <HAL_UART_IRQHandler+0x260>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fcf4 	bl	80037ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e02:	e045      	b.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d031      	beq.n	8002e8e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
    }
    return;
 8002e32:	e02c      	b.n	8002e8e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_UART_IRQHandler+0x2ac>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fcb4 	bl	80037b6 <UART_EndTransmit_IT>
    return;
 8002e4e:	e01f      	b.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_UART_IRQHandler+0x2c8>
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fcd4 	bl	8003812 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e6a:	e011      	b.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da09      	bge.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fcbe 	bl	80037fe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e82:	bf00      	nop
 8002e84:	e004      	b.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
      return;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
    return;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <HAL_UART_IRQHandler+0x2ec>
    return;
 8002e8e:	bf00      	nop
  }
}
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	10000001 	.word	0x10000001
 8002e9c:	04000120 	.word	0x04000120
 8002ea0:	0800378b 	.word	0x0800378b

08002ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ecc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4bb1      	ldr	r3, [pc, #708]	; (80031c8 <UART_SetConfig+0x2fc>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	69f9      	ldr	r1, [r7, #28]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4aa6      	ldr	r2, [pc, #664]	; (80031cc <UART_SetConfig+0x300>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	69f9      	ldr	r1, [r7, #28]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f023 010f 	bic.w	r1, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a97      	ldr	r2, [pc, #604]	; (80031d0 <UART_SetConfig+0x304>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d121      	bne.n	8002fbc <UART_SetConfig+0xf0>
 8002f78:	4b96      	ldr	r3, [pc, #600]	; (80031d4 <UART_SetConfig+0x308>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d816      	bhi.n	8002fb4 <UART_SetConfig+0xe8>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0xc0>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002fa3 	.word	0x08002fa3
 8002f98:	08002faf 	.word	0x08002faf
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	76fb      	strb	r3, [r7, #27]
 8002fa0:	e0e8      	b.n	8003174 <UART_SetConfig+0x2a8>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	76fb      	strb	r3, [r7, #27]
 8002fa6:	e0e5      	b.n	8003174 <UART_SetConfig+0x2a8>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	76fb      	strb	r3, [r7, #27]
 8002fac:	e0e2      	b.n	8003174 <UART_SetConfig+0x2a8>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	76fb      	strb	r3, [r7, #27]
 8002fb2:	e0df      	b.n	8003174 <UART_SetConfig+0x2a8>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	76fb      	strb	r3, [r7, #27]
 8002fb8:	bf00      	nop
 8002fba:	e0db      	b.n	8003174 <UART_SetConfig+0x2a8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a85      	ldr	r2, [pc, #532]	; (80031d8 <UART_SetConfig+0x30c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d134      	bne.n	8003030 <UART_SetConfig+0x164>
 8002fc6:	4b83      	ldr	r3, [pc, #524]	; (80031d4 <UART_SetConfig+0x308>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b0c      	cmp	r3, #12
 8002fd2:	d829      	bhi.n	8003028 <UART_SetConfig+0x15c>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x110>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003029 	.word	0x08003029
 8002fe4:	08003029 	.word	0x08003029
 8002fe8:	08003029 	.word	0x08003029
 8002fec:	0800301d 	.word	0x0800301d
 8002ff0:	08003029 	.word	0x08003029
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003029 	.word	0x08003029
 8002ffc:	08003017 	.word	0x08003017
 8003000:	08003029 	.word	0x08003029
 8003004:	08003029 	.word	0x08003029
 8003008:	08003029 	.word	0x08003029
 800300c:	08003023 	.word	0x08003023
 8003010:	2300      	movs	r3, #0
 8003012:	76fb      	strb	r3, [r7, #27]
 8003014:	e0ae      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003016:	2302      	movs	r3, #2
 8003018:	76fb      	strb	r3, [r7, #27]
 800301a:	e0ab      	b.n	8003174 <UART_SetConfig+0x2a8>
 800301c:	2304      	movs	r3, #4
 800301e:	76fb      	strb	r3, [r7, #27]
 8003020:	e0a8      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003022:	2308      	movs	r3, #8
 8003024:	76fb      	strb	r3, [r7, #27]
 8003026:	e0a5      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003028:	2310      	movs	r3, #16
 800302a:	76fb      	strb	r3, [r7, #27]
 800302c:	bf00      	nop
 800302e:	e0a1      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a69      	ldr	r2, [pc, #420]	; (80031dc <UART_SetConfig+0x310>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d120      	bne.n	800307c <UART_SetConfig+0x1b0>
 800303a:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <UART_SetConfig+0x308>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003044:	2b10      	cmp	r3, #16
 8003046:	d00f      	beq.n	8003068 <UART_SetConfig+0x19c>
 8003048:	2b10      	cmp	r3, #16
 800304a:	d802      	bhi.n	8003052 <UART_SetConfig+0x186>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <UART_SetConfig+0x190>
 8003050:	e010      	b.n	8003074 <UART_SetConfig+0x1a8>
 8003052:	2b20      	cmp	r3, #32
 8003054:	d005      	beq.n	8003062 <UART_SetConfig+0x196>
 8003056:	2b30      	cmp	r3, #48	; 0x30
 8003058:	d009      	beq.n	800306e <UART_SetConfig+0x1a2>
 800305a:	e00b      	b.n	8003074 <UART_SetConfig+0x1a8>
 800305c:	2300      	movs	r3, #0
 800305e:	76fb      	strb	r3, [r7, #27]
 8003060:	e088      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003062:	2302      	movs	r3, #2
 8003064:	76fb      	strb	r3, [r7, #27]
 8003066:	e085      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003068:	2304      	movs	r3, #4
 800306a:	76fb      	strb	r3, [r7, #27]
 800306c:	e082      	b.n	8003174 <UART_SetConfig+0x2a8>
 800306e:	2308      	movs	r3, #8
 8003070:	76fb      	strb	r3, [r7, #27]
 8003072:	e07f      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003074:	2310      	movs	r3, #16
 8003076:	76fb      	strb	r3, [r7, #27]
 8003078:	bf00      	nop
 800307a:	e07b      	b.n	8003174 <UART_SetConfig+0x2a8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <UART_SetConfig+0x314>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d120      	bne.n	80030c8 <UART_SetConfig+0x1fc>
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <UART_SetConfig+0x308>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d00f      	beq.n	80030b4 <UART_SetConfig+0x1e8>
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d802      	bhi.n	800309e <UART_SetConfig+0x1d2>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <UART_SetConfig+0x1dc>
 800309c:	e010      	b.n	80030c0 <UART_SetConfig+0x1f4>
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d005      	beq.n	80030ae <UART_SetConfig+0x1e2>
 80030a2:	2bc0      	cmp	r3, #192	; 0xc0
 80030a4:	d009      	beq.n	80030ba <UART_SetConfig+0x1ee>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x1f4>
 80030a8:	2300      	movs	r3, #0
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	e062      	b.n	8003174 <UART_SetConfig+0x2a8>
 80030ae:	2302      	movs	r3, #2
 80030b0:	76fb      	strb	r3, [r7, #27]
 80030b2:	e05f      	b.n	8003174 <UART_SetConfig+0x2a8>
 80030b4:	2304      	movs	r3, #4
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e05c      	b.n	8003174 <UART_SetConfig+0x2a8>
 80030ba:	2308      	movs	r3, #8
 80030bc:	76fb      	strb	r3, [r7, #27]
 80030be:	e059      	b.n	8003174 <UART_SetConfig+0x2a8>
 80030c0:	2310      	movs	r3, #16
 80030c2:	76fb      	strb	r3, [r7, #27]
 80030c4:	bf00      	nop
 80030c6:	e055      	b.n	8003174 <UART_SetConfig+0x2a8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <UART_SetConfig+0x318>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d124      	bne.n	800311c <UART_SetConfig+0x250>
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <UART_SetConfig+0x308>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e0:	d012      	beq.n	8003108 <UART_SetConfig+0x23c>
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e6:	d802      	bhi.n	80030ee <UART_SetConfig+0x222>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <UART_SetConfig+0x230>
 80030ec:	e012      	b.n	8003114 <UART_SetConfig+0x248>
 80030ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f2:	d006      	beq.n	8003102 <UART_SetConfig+0x236>
 80030f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030f8:	d009      	beq.n	800310e <UART_SetConfig+0x242>
 80030fa:	e00b      	b.n	8003114 <UART_SetConfig+0x248>
 80030fc:	2300      	movs	r3, #0
 80030fe:	76fb      	strb	r3, [r7, #27]
 8003100:	e038      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003102:	2302      	movs	r3, #2
 8003104:	76fb      	strb	r3, [r7, #27]
 8003106:	e035      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003108:	2304      	movs	r3, #4
 800310a:	76fb      	strb	r3, [r7, #27]
 800310c:	e032      	b.n	8003174 <UART_SetConfig+0x2a8>
 800310e:	2308      	movs	r3, #8
 8003110:	76fb      	strb	r3, [r7, #27]
 8003112:	e02f      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003114:	2310      	movs	r3, #16
 8003116:	76fb      	strb	r3, [r7, #27]
 8003118:	bf00      	nop
 800311a:	e02b      	b.n	8003174 <UART_SetConfig+0x2a8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <UART_SetConfig+0x300>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d124      	bne.n	8003170 <UART_SetConfig+0x2a4>
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <UART_SetConfig+0x308>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003134:	d012      	beq.n	800315c <UART_SetConfig+0x290>
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d802      	bhi.n	8003142 <UART_SetConfig+0x276>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <UART_SetConfig+0x284>
 8003140:	e012      	b.n	8003168 <UART_SetConfig+0x29c>
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	d006      	beq.n	8003156 <UART_SetConfig+0x28a>
 8003148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800314c:	d009      	beq.n	8003162 <UART_SetConfig+0x296>
 800314e:	e00b      	b.n	8003168 <UART_SetConfig+0x29c>
 8003150:	2300      	movs	r3, #0
 8003152:	76fb      	strb	r3, [r7, #27]
 8003154:	e00e      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003156:	2302      	movs	r3, #2
 8003158:	76fb      	strb	r3, [r7, #27]
 800315a:	e00b      	b.n	8003174 <UART_SetConfig+0x2a8>
 800315c:	2304      	movs	r3, #4
 800315e:	76fb      	strb	r3, [r7, #27]
 8003160:	e008      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003162:	2308      	movs	r3, #8
 8003164:	76fb      	strb	r3, [r7, #27]
 8003166:	e005      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003168:	2310      	movs	r3, #16
 800316a:	76fb      	strb	r3, [r7, #27]
 800316c:	bf00      	nop
 800316e:	e001      	b.n	8003174 <UART_SetConfig+0x2a8>
 8003170:	2310      	movs	r3, #16
 8003172:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <UART_SetConfig+0x300>)
 800317a:	4293      	cmp	r3, r2
 800317c:	f040 80a1 	bne.w	80032c2 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003180:	7efb      	ldrb	r3, [r7, #27]
 8003182:	2b08      	cmp	r3, #8
 8003184:	d836      	bhi.n	80031f4 <UART_SetConfig+0x328>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <UART_SetConfig+0x2c0>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080031f5 	.word	0x080031f5
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031f5 	.word	0x080031f5
 800319c:	080031bf 	.word	0x080031bf
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	080031f5 	.word	0x080031f5
 80031a8:	080031f5 	.word	0x080031f5
 80031ac:	080031ed 	.word	0x080031ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7fe fdb2 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 80031b4:	6178      	str	r0, [r7, #20]
        break;
 80031b6:	e022      	b.n	80031fe <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <UART_SetConfig+0x31c>)
 80031ba:	617b      	str	r3, [r7, #20]
        break;
 80031bc:	e01f      	b.n	80031fe <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe fd3d 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80031c2:	6178      	str	r0, [r7, #20]
        break;
 80031c4:	e01b      	b.n	80031fe <UART_SetConfig+0x332>
 80031c6:	bf00      	nop
 80031c8:	cfff69f3 	.word	0xcfff69f3
 80031cc:	40008000 	.word	0x40008000
 80031d0:	40013800 	.word	0x40013800
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40004400 	.word	0x40004400
 80031dc:	40004800 	.word	0x40004800
 80031e0:	40004c00 	.word	0x40004c00
 80031e4:	40005000 	.word	0x40005000
 80031e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f0:	617b      	str	r3, [r7, #20]
        break;
 80031f2:	e004      	b.n	80031fe <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	76bb      	strb	r3, [r7, #26]
        break;
 80031fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 811d 	beq.w	8003440 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	4a97      	ldr	r2, [pc, #604]	; (8003468 <UART_SetConfig+0x59c>)
 800320c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003210:	461a      	mov	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fbb3 f3f2 	udiv	r3, r3, r2
 8003218:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d305      	bcc.n	8003236 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d902      	bls.n	800323c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	76bb      	strb	r3, [r7, #26]
 800323a:	e101      	b.n	8003440 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4618      	mov	r0, r3
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	4a87      	ldr	r2, [pc, #540]	; (8003468 <UART_SetConfig+0x59c>)
 800324a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800324e:	b29b      	uxth	r3, r3
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	461a      	mov	r2, r3
 8003256:	4623      	mov	r3, r4
 8003258:	f7fc ffe2 	bl	8000220 <__aeabi_uldivmod>
 800325c:	4603      	mov	r3, r0
 800325e:	460c      	mov	r4, r1
 8003260:	4619      	mov	r1, r3
 8003262:	4622      	mov	r2, r4
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	f04f 0400 	mov.w	r4, #0
 800326c:	0214      	lsls	r4, r2, #8
 800326e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003272:	020b      	lsls	r3, r1, #8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6852      	ldr	r2, [r2, #4]
 8003278:	0852      	lsrs	r2, r2, #1
 800327a:	4611      	mov	r1, r2
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	eb13 0b01 	adds.w	fp, r3, r1
 8003284:	eb44 0c02 	adc.w	ip, r4, r2
 8003288:	4658      	mov	r0, fp
 800328a:	4661      	mov	r1, ip
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	461a      	mov	r2, r3
 8003296:	4623      	mov	r3, r4
 8003298:	f7fc ffc2 	bl	8000220 <__aeabi_uldivmod>
 800329c:	4603      	mov	r3, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a8:	d308      	bcc.n	80032bc <UART_SetConfig+0x3f0>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b0:	d204      	bcs.n	80032bc <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e0c1      	b.n	8003440 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	76bb      	strb	r3, [r7, #26]
 80032c0:	e0be      	b.n	8003440 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ca:	d164      	bne.n	8003396 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80032cc:	7efb      	ldrb	r3, [r7, #27]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d827      	bhi.n	8003322 <UART_SetConfig+0x456>
 80032d2:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <UART_SetConfig+0x40c>)
 80032d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d8:	080032fd 	.word	0x080032fd
 80032dc:	08003305 	.word	0x08003305
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	08003323 	.word	0x08003323
 80032e8:	08003313 	.word	0x08003313
 80032ec:	08003323 	.word	0x08003323
 80032f0:	08003323 	.word	0x08003323
 80032f4:	08003323 	.word	0x08003323
 80032f8:	0800331b 	.word	0x0800331b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032fc:	f7fe fd0c 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8003300:	6178      	str	r0, [r7, #20]
        break;
 8003302:	e013      	b.n	800332c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7fe fd1e 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8003308:	6178      	str	r0, [r7, #20]
        break;
 800330a:	e00f      	b.n	800332c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330c:	4b57      	ldr	r3, [pc, #348]	; (800346c <UART_SetConfig+0x5a0>)
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e00c      	b.n	800332c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003312:	f7fe fc93 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8003316:	6178      	str	r0, [r7, #20]
        break;
 8003318:	e008      	b.n	800332c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	617b      	str	r3, [r7, #20]
        break;
 8003320:	e004      	b.n	800332c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	76bb      	strb	r3, [r7, #26]
        break;
 800332a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8086 	beq.w	8003440 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <UART_SetConfig+0x59c>)
 800333a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800333e:	461a      	mov	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fbb3 f3f2 	udiv	r3, r3, r2
 8003346:	005a      	lsls	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	b29b      	uxth	r3, r3
 800335a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	d916      	bls.n	8003390 <UART_SetConfig+0x4c4>
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d212      	bcs.n	8003390 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f023 030f 	bic.w	r3, r3, #15
 8003372:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	b29b      	uxth	r3, r3
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	b29a      	uxth	r2, r3
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	4313      	orrs	r3, r2
 8003384:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	89fa      	ldrh	r2, [r7, #14]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	e057      	b.n	8003440 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	76bb      	strb	r3, [r7, #26]
 8003394:	e054      	b.n	8003440 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003396:	7efb      	ldrb	r3, [r7, #27]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d828      	bhi.n	80033ee <UART_SetConfig+0x522>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <UART_SetConfig+0x4d8>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033df 	.word	0x080033df
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7fe fca6 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 80033cc:	6178      	str	r0, [r7, #20]
        break;
 80033ce:	e013      	b.n	80033f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7fe fcb8 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 80033d4:	6178      	str	r0, [r7, #20]
        break;
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <UART_SetConfig+0x5a0>)
 80033da:	617b      	str	r3, [r7, #20]
        break;
 80033dc:	e00c      	b.n	80033f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fc2d 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80033e2:	6178      	str	r0, [r7, #20]
        break;
 80033e4:	e008      	b.n	80033f8 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	617b      	str	r3, [r7, #20]
        break;
 80033ec:	e004      	b.n	80033f8 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	76bb      	strb	r3, [r7, #26]
        break;
 80033f6:	bf00      	nop
    }

    if (pclk != 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <UART_SetConfig+0x59c>)
 8003404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003408:	461a      	mov	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	441a      	add	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	b29b      	uxth	r3, r3
 8003422:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	d908      	bls.n	800343c <UART_SetConfig+0x570>
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d204      	bcs.n	800343c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	e001      	b.n	8003440 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800345c:	7ebb      	ldrb	r3, [r7, #26]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003468:	08006e2c 	.word	0x08006e2c
 800346c:	00f42400 	.word	0x00f42400

08003470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01a      	beq.n	8003586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356e:	d10a      	bne.n	8003586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c4:	f7fd fb2a 	bl	8000c1c <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d10e      	bne.n	80035f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f82c 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e022      	b.n	800363c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d10e      	bne.n	8003622 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f816 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00c      	b.n	800363c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	e062      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d05e      	beq.n	800371c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fd fadd 	bl	8000c1c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <UART_WaitOnFlagUntilTimeout+0x30>
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11d      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003682:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e045      	b.n	800373c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02e      	beq.n	800371c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036cc:	d126      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e00f      	b.n	800373c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	429a      	cmp	r2, r3
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d08d      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800375a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff fb85 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fb61 	bl	8002ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UARTEx_EnableFifoMode+0x16>
 8003838:	2302      	movs	r3, #2
 800383a:	e02b      	b.n	8003894 <HAL_UARTEx_EnableFifoMode+0x6e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	; 0x24
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800386a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003872:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f889 	bl	8003994 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e02d      	b.n	8003910 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f84f 	bl	8003994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800392c:	2302      	movs	r3, #2
 800392e:	e02d      	b.n	800398c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f811 	bl	8003994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800399c:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <UARTEx_SetNbDataToProcess+0xc8>)
 800399e:	f107 0314 	add.w	r3, r7, #20
 80039a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80039aa:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <UARTEx_SetNbDataToProcess+0xcc>)
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039b4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d108      	bne.n	80039d2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039d0:	e03d      	b.n	8003a4e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039d6:	2308      	movs	r3, #8
 80039d8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	0e5b      	lsrs	r3, r3, #25
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	0f5b      	lsrs	r3, r3, #29
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039fa:	7fbb      	ldrb	r3, [r7, #30]
 80039fc:	7f3a      	ldrb	r2, [r7, #28]
 80039fe:	f107 0120 	add.w	r1, r7, #32
 8003a02:	440a      	add	r2, r1
 8003a04:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a0c:	7f3a      	ldrb	r2, [r7, #28]
 8003a0e:	f107 0120 	add.w	r1, r7, #32
 8003a12:	440a      	add	r2, r1
 8003a14:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a24:	7ffb      	ldrb	r3, [r7, #31]
 8003a26:	7f7a      	ldrb	r2, [r7, #29]
 8003a28:	f107 0120 	add.w	r1, r7, #32
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a36:	7f7a      	ldrb	r2, [r7, #29]
 8003a38:	f107 0120 	add.w	r1, r7, #32
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a42:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a4e:	bf00      	nop
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	08006de4 	.word	0x08006de4
 8003a60:	08006dec 	.word	0x08006dec

08003a64 <_ZN10ObservableC1EPPFvPS_PvEi>:
 *      Author: Jakub Mnich
 */

#include <observable.h>

Observable::Observable(void(**_subscribersArray)(Observable*, void*), int _observersArraySize) {
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
	subscribers_ = _subscribersArray;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	601a      	str	r2, [r3, #0]
	maxSubscribers_ = maxSubscribers_;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	605a      	str	r2, [r3, #4]
	currentSubscribers_ = 0;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
	dataForUpdate = 0x0;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	60da      	str	r2, [r3, #12]
}
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZN10Observable9subscribeEPFvPS_PvE>:

void Observable::subscribe(void(*_updateFunction)(Observable*, void*)) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]

	*(subscribers_ + currentSubscribers_) = _updateFunction;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
	currentSubscribers_++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_ZN10Observable6notifyEv>:

int Observable::getMaxSubscribersCount() {
	return maxSubscribers_;
}

void Observable::notify() {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < currentSubscribers_; i++) {
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	da0e      	bge.n	8003afc <_ZN10Observable6notifyEv+0x34>
		(*(subscribers_ + i))(this, dataForUpdate);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	4611      	mov	r1, r2
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
	for(int i = 0; i < currentSubscribers_; i++) {
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e7eb      	b.n	8003ad4 <_ZN10Observable6notifyEv+0xc>
	}
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <_ZN9TaskClassC1EPKcmt>:
 *      Author: Jakub Mnich
 */

#include "task_wrapper.h"

TaskClass::TaskClass(char const * _name, unsigned portBASE_TYPE _priority, unsigned portSHORT _stackDepth) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	807b      	strh	r3, [r7, #2]
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <_ZN9TaskClassC1EPKcmt+0x34>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	601a      	str	r2, [r3, #0]
	 * FreeRTOS task is created normally and receives a reference to this object
	 * as parameters in the argument. This ensures that all relevant information
	 * that would normally be passes this way is already contained in the wrapper
	 * object.
	 */
	xTaskCreate(taskFunction, _name, _stackDepth, this, _priority, &(this->taskHandle_));
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	887a      	ldrh	r2, [r7, #2]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4804      	ldr	r0, [pc, #16]	; (8003b3c <_ZN9TaskClassC1EPKcmt+0x38>)
 8003b2a:	f001 f9df 	bl	8004eec <xTaskCreate>
}
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	08006e4c 	.word	0x08006e4c
 8003b3c:	08003b41 	.word	0x08003b41

08003b40 <_ZN9TaskClass12taskFunctionEPv>:

TaskClass::~TaskClass() { }

void TaskClass::taskFunction(void* _param) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	 * In order for the function pointer to be callable from FreeRTOS is must lose
	 * its 'this' pointer (become static). Therefore 'taskFunction' is needed to
	 * act as a trampolin for the virtual 'task' function implemented by a child
	 * class.
	 */
	TaskClass * p = static_cast<TaskClass *>(_param);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]
	p->task();
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	4798      	blx	r3
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <_ZN12UART_WrapperC1EP20__UART_HandleTypeDefPhmPPFvP10ObservablePvEi>:
#include "uart_wrapper.h"

UART_Wrapper::UART_Wrapper(UART_HandleTypeDef * _UART_Handle, uint8_t * _bufPtr, uint32_t _bufSize,
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
		void(**_subscribersArray)(Observable*, void*), int _observersArraySize) :
		TaskClass("uartRx", 2), Observable(_subscribersArray, _observersArraySize)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b74:	2202      	movs	r2, #2
 8003b76:	491f      	ldr	r1, [pc, #124]	; (8003bf4 <_ZN12UART_WrapperC1EP20__UART_HandleTypeDefPhmPPFvP10ObservablePvEi+0x94>)
 8003b78:	f7ff ffc4 	bl	8003b04 <_ZN9TaskClassC1EPKcmt>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b82:	6a39      	ldr	r1, [r7, #32]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff6d 	bl	8003a64 <_ZN10ObservableC1EPPFvPS_PvEi>
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <_ZN12UART_WrapperC1EP20__UART_HandleTypeDefPhmPPFvP10ObservablePvEi+0x98>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]
{

	this->UART_Handle_ = _UART_Handle;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	619a      	str	r2, [r3, #24]
	this->rxBufPtr_ = _bufPtr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	61da      	str	r2, [r3, #28]
	this->rxBufSize_ = _bufSize;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	621a      	str	r2, [r3, #32]

	this->rxBufHead_ = rxBufPtr_;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
	this->rxBufTail_ = rxBufPtr_;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	629a      	str	r2, [r3, #40]	; 0x28

	this->messagesInRxBufferSemaphore_ = xQueueCreateCountingSemaphore(16, 0);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2010      	movs	r0, #16
 8003bb6:	f000 fbe7 	bl	8004388 <xQueueCreateCountingSemaphore>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

	// zero the rx buffer
	for(uint32_t i = 0; i < rxBufSize_; i++) {
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf34      	ite	cc
 8003bce:	2301      	movcc	r3, #1
 8003bd0:	2300      	movcs	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <_ZN12UART_WrapperC1EP20__UART_HandleTypeDefPhmPPFvP10ObservablePvEi+0x8a>
		*(_bufPtr++) = 0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < rxBufSize_; i++) {
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e7ec      	b.n	8003bc4 <_ZN12UART_WrapperC1EP20__UART_HandleTypeDefPhmPPFvP10ObservablePvEi+0x64>
	}
}
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08006df4 	.word	0x08006df4
 8003bf8:	08006e58 	.word	0x08006e58

08003bfc <_ZN12UART_Wrapper4taskEv>:
	}
}

// ========== PUBLIC FUNCTIONS ==========

void UART_Wrapper::task() {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

	while(1) {
		xSemaphoreTake(this->messagesInRxBufferSemaphore_, portMAX_DELAY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fee1 	bl	80049d4 <xQueueSemaphoreTake>

		// handle a message in the rx buffer
		// 1. check message size
		uint32_t size = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
		uint8_t * dummyPtr = (uint8_t *)this->rxBufTail_;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	613b      	str	r3, [r7, #16]
		while(*dummyPtr) {
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <_ZN12UART_Wrapper4taskEv+0x56>
			size++;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
			dummyPtr++;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]

			// loop the pointer when it hits the end of the buffer
			if(dummyPtr > rxBufPtr_ + rxBufSize_) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4413      	add	r3, r2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	bf8c      	ite	hi
 8003c40:	2301      	movhi	r3, #1
 8003c42:	2300      	movls	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0e8      	beq.n	8003c1c <_ZN12UART_Wrapper4taskEv+0x20>
				dummyPtr = (uint8_t *)rxBufPtr_;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	613b      	str	r3, [r7, #16]
		while(*dummyPtr) {
 8003c50:	e7e4      	b.n	8003c1c <_ZN12UART_Wrapper4taskEv+0x20>
			}
		}

		// 2. allocate memory to hold the whole message
		char * s = new char[size + 1];
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	3301      	adds	r3, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fce4 	bl	8000624 <_Znaj>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60bb      	str	r3, [r7, #8]

		// 3. copy data from the ring buffer to the message buffer
		for(uint32_t i = 0; i < size; i++) {
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d226      	bcs.n	8003cba <_ZN12UART_Wrapper4taskEv+0xbe>
			s[i] = *rxBufTail_;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	440b      	add	r3, r1
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
			*rxBufTail_ = 0;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
			rxBufTail_++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28

			if(rxBufTail_ > rxBufPtr_ + rxBufSize_)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69d9      	ldr	r1, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	440b      	add	r3, r1
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf8c      	ite	hi
 8003ca0:	2301      	movhi	r3, #1
 8003ca2:	2300      	movls	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <_ZN12UART_Wrapper4taskEv+0xb6>
				rxBufTail_ = rxBufPtr_;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
		for(uint32_t i = 0; i < size; i++) {
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e7d4      	b.n	8003c64 <_ZN12UART_Wrapper4taskEv+0x68>
		}

		// 4. terminate the message buffer
		s[size] = 0;
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]

		// 5. increment the tail - head points at the first free byte and tail must catch up now
		rxBufTail_++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28

		this->dataForUpdate = (void*)s;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	615a      	str	r2, [r3, #20]
		notify();
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff fef5 	bl	8003ac8 <_ZN10Observable6notifyEv>
	}
 8003cde:	e791      	b.n	8003c04 <_ZN12UART_Wrapper4taskEv+0x8>

08003ce0 <_ZN12UART_Wrapper10sendStringEPKc>:
}

void UART_Wrapper::sendString(const char* _s) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]

	while(*_s) {
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <_ZN12UART_Wrapper10sendStringEPKc+0x26>
		HAL_UART_Transmit(UART_Handle_, (uint8_t*)(_s)++, 1, 1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6998      	ldr	r0, [r3, #24]
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	1c4b      	adds	r3, r1, #1
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f7fe feba 	bl	8002a78 <HAL_UART_Transmit>
	while(*_s) {
 8003d04:	e7f1      	b.n	8003cea <_ZN12UART_Wrapper10sendStringEPKc+0xa>
	}
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <_ZN12UART_Wrapper7startRxEv>:

void UART_Wrapper::sendByte(uint8_t _b) {
	HAL_UART_Transmit(UART_Handle_, &_b, 1, 1);
}

void UART_Wrapper::startRx() {
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	/* Check that a Rx process is not already ongoing */
	if (UART_Handle_->RxState == HAL_UART_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8084 	beq.w	8003e38 <_ZN12UART_Wrapper7startRxEv+0x128>
	{
		UART_Handle_->pRxBuffPtr  = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2200      	movs	r2, #0
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
		UART_Handle_->RxXferSize  = 0;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		UART_Handle_->RxXferCount = 0;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		UART_Handle_->RxISR       = UART_Wrapper::UART_RxISR_8BIT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <_ZN12UART_Wrapper7startRxEv+0x134>)
 8003d52:	66da      	str	r2, [r3, #108]	; 0x6c

		/* Computation of UART mask to apply to RDR register */
		UART_MASK_COMPUTATION(UART_Handle_);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d111      	bne.n	8003d84 <_ZN12UART_Wrapper7startRxEv+0x74>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <_ZN12UART_Wrapper7startRxEv+0x68>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d76:	e037      	b.n	8003de8 <_ZN12UART_Wrapper7startRxEv+0xd8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	22ff      	movs	r2, #255	; 0xff
 8003d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003d82:	e031      	b.n	8003de8 <_ZN12UART_Wrapper7startRxEv+0xd8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d110      	bne.n	8003db0 <_ZN12UART_Wrapper7startRxEv+0xa0>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <_ZN12UART_Wrapper7startRxEv+0x94>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003da2:	e021      	b.n	8003de8 <_ZN12UART_Wrapper7startRxEv+0xd8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	227f      	movs	r2, #127	; 0x7f
 8003daa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003dae:	e01b      	b.n	8003de8 <_ZN12UART_Wrapper7startRxEv+0xd8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dba:	d110      	bne.n	8003dde <_ZN12UART_Wrapper7startRxEv+0xce>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d105      	bne.n	8003dd2 <_ZN12UART_Wrapper7startRxEv+0xc2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	227f      	movs	r2, #127	; 0x7f
 8003dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003dd0:	e00a      	b.n	8003de8 <_ZN12UART_Wrapper7startRxEv+0xd8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	223f      	movs	r2, #63	; 0x3f
 8003dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ddc:	e004      	b.n	8003de8 <_ZN12UART_Wrapper7startRxEv+0xd8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

		UART_Handle_->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		UART_Handle_->RxState = HAL_UART_STATE_BUSY_RX;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2222      	movs	r2, #34	; 0x22
 8003df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(UART_Handle_->Instance->CR3, USART_CR3_EIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	609a      	str	r2, [r3, #8]
		SET_BIT(UART_Handle_->Instance->CR1, USART_CR1_PEIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e22:	601a      	str	r2, [r3, #0]
		SET_BIT(UART_Handle_->Instance->CR3, USART_CR3_RXFTIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e36:	609a      	str	r2, [r3, #8]
	}
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	08003fd1 	.word	0x08003fd1

08003e48 <_ZN12UART_Wrapper10rxCallbackEv>:

void UART_Wrapper::stopRx() {
	HAL_UART_AbortReceive_IT(UART_Handle_);
}

void UART_Wrapper::rxCallback() {
 8003e48:	b5b0      	push	{r4, r5, r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

	uint16_t uhMask = UART_Handle_->Mask;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e58:	81bb      	strh	r3, [r7, #12]
	uint16_t  uhdata;

	uint8_t newLineCounter = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]

	/* Check that a Rx process is ongoing */
	if (UART_Handle_->RxState == HAL_UART_STATE_BUSY_RX)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	2b22      	cmp	r3, #34	; 0x22
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d067      	beq.n	8003f44 <_ZN12UART_Wrapper10rxCallbackEv+0xfc>
	{

		// make sure all received bytes are extracted from FIFO
		while(UART_Handle_->Instance->ISR & UART_FLAG_RXFNE) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d030      	beq.n	8003ef0 <_ZN12UART_Wrapper10rxCallbackEv+0xa8>
			uhdata = (uint16_t) READ_REG(UART_Handle_->Instance->RDR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	817b      	strh	r3, [r7, #10]

			*(this->getNextFreeRxPositionInBuf()) = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	b2dd      	uxtb	r5, r3
 8003e9c:	89bb      	ldrh	r3, [r7, #12]
 8003e9e:	b2dc      	uxtb	r4, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f870 	bl	8003f86 <_ZN12UART_Wrapper26getNextFreeRxPositionInBufEv>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	ea05 0204 	and.w	r2, r5, r4
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]
			UART_Handle_->pRxBuffPtr++;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eb6:	3201      	adds	r2, #1
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58
			UART_Handle_->RxXferCount--;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8003ec2:	b292      	uxth	r2, r2
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

			if((uint8_t)(uhdata & (uint8_t)uhMask) == '\n') {
 8003ecc:	897b      	ldrh	r3, [r7, #10]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	89bb      	ldrh	r3, [r7, #12]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b0a      	cmp	r3, #10
 8003eda:	d1cb      	bne.n	8003e74 <_ZN12UART_Wrapper10rxCallbackEv+0x2c>
				newLineCounter++;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
				// terminate the full line in the buffer with '0'
				*(this->getNextFreeRxPositionInBuf()) = 0x0;
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f84f 	bl	8003f86 <_ZN12UART_Wrapper26getNextFreeRxPositionInBufEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
		while(UART_Handle_->Instance->ISR & UART_FLAG_RXFNE) {
 8003eee:	e7c1      	b.n	8003e74 <_ZN12UART_Wrapper10rxCallbackEv+0x2c>
			}

		}

		if (UART_Handle_->RxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d027      	beq.n	8003f58 <_ZN12UART_Wrapper10rxCallbackEv+0x110>
		{
			/* Disable the UART Parity Error Interrupt and RXNE interrupts */
			CLEAR_BIT(UART_Handle_->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f1a:	601a      	str	r2, [r3, #0]

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			CLEAR_BIT(UART_Handle_->Instance->CR3, USART_CR3_EIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	609a      	str	r2, [r3, #8]

			/* Rx process is completed, restore huart->RxState to Ready */
			UART_Handle_->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

			/* Clear RxISR function pointer */
			UART_Handle_->RxISR = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f42:	e009      	b.n	8003f58 <_ZN12UART_Wrapper10rxCallbackEv+0x110>
		}
	}
	else
	{
		/* Clear RXNE interrupt flag */
		__HAL_UART_SEND_REQ(UART_Handle_, UART_RXDATA_FLUSH_REQUEST);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0208 	orr.w	r2, r2, #8
 8003f56:	619a      	str	r2, [r3, #24]
	}

	// start listening again
	startRx();
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fed9 	bl	8003d10 <_ZN12UART_Wrapper7startRxEv>

	// if new line signs were located in the message incerement the couting semaphore
	for(uint8_t i = 0; i < newLineCounter; i++) {
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73bb      	strb	r3, [r7, #14]
 8003f62:	7bba      	ldrb	r2, [r7, #14]
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d209      	bcs.n	8003f7e <_ZN12UART_Wrapper10rxCallbackEv+0x136>
		xSemaphoreGiveFromISR(this->messagesInRxBufferSemaphore_, NULL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fbc9 	bl	8004708 <xQueueGiveFromISR>
	for(uint8_t i = 0; i < newLineCounter; i++) {
 8003f76:	7bbb      	ldrb	r3, [r7, #14]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	73bb      	strb	r3, [r7, #14]
 8003f7c:	e7f1      	b.n	8003f62 <_ZN12UART_Wrapper10rxCallbackEv+0x11a>
	}
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bdb0      	pop	{r4, r5, r7, pc}

08003f86 <_ZN12UART_Wrapper26getNextFreeRxPositionInBufEv>:

// ========== PRIVATE FUNCTIONS ==========

uint8_t * UART_Wrapper::getNextFreeRxPositionInBuf() {
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]

	uint8_t * output = (uint8_t *)rxBufHead_;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	60fb      	str	r3, [r7, #12]
	rxBufHead_++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24

	// the buffer head jumps back to the start if needed
	if(rxBufHead_ > rxBufPtr_ + rxBufSize_) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69d9      	ldr	r1, [r3, #28]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	440b      	add	r3, r1
 8003fac:	429a      	cmp	r2, r3
 8003fae:	bf8c      	ite	hi
 8003fb0:	2301      	movhi	r3, #1
 8003fb2:	2300      	movls	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <_ZN12UART_Wrapper26getNextFreeRxPositionInBufEv+0x3c>
		rxBufHead_ = rxBufPtr_;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

	if(rxBufHead_ == rxBufTail_) {
		// TODO - buffer overflow
	}

	return output;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_ZN12UART_Wrapper15UART_RxISR_8BITEP20__UART_HandleTypeDef>:

/*
 * custom ISR routine for handling incoming transmission while retaining some degree of
 * compatibility with the HAL
 */
void UART_Wrapper::UART_RxISR_8BIT(UART_HandleTypeDef *huart) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

	HAL_UART_RxCpltCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fc fc11 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff8:	2b84      	cmp	r3, #132	; 0x84
 8003ffa:	d005      	beq.n	8004008 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ffc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	3303      	adds	r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800401a:	f001 f8cd 	bl	80051b8 <vTaskStartScheduler>
  
  return osOK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}

08004024 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004026:	b087      	sub	sp, #28
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685c      	ldr	r4, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800403a:	b29e      	uxth	r6, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ffcf 	bl	8003fe6 <makeFreeRtosPriority>
 8004048:	4602      	mov	r2, r0
 800404a:	f107 030c 	add.w	r3, r7, #12
 800404e:	9301      	str	r3, [sp, #4]
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4632      	mov	r2, r6
 8004056:	4629      	mov	r1, r5
 8004058:	4620      	mov	r0, r4
 800405a:	f000 ff47 	bl	8004eec <xTaskCreate>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004068:	68fb      	ldr	r3, [r7, #12]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004072 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <osDelay+0x16>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	e000      	b.n	800408a <osDelay+0x18>
 8004088:	2301      	movs	r3, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f860 	bl	8005150 <vTaskDelay>
  
  return osOK;
 8004090:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f103 0208 	add.w	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f103 0208 	add.w	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d103      	bne.n	800415c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e00c      	b.n	8004176 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3308      	adds	r3, #8
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <vListInsert+0x2e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d2f6      	bcs.n	8004164 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
 80041c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6852      	ldr	r2, [r2, #4]
 80041ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d103      	bne.n	80041e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	e7fe      	b.n	800422a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800422c:	f002 fa2e 	bl	800668c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	3b01      	subs	r3, #1
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	22ff      	movs	r2, #255	; 0xff
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d114      	bne.n	80042ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01a      	beq.n	80042c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3310      	adds	r3, #16
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f9f8 	bl	8005684 <xTaskRemoveFromEventList>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <xQueueGenericReset+0xcc>)
 800429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	e009      	b.n	80042c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3310      	adds	r3, #16
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fef2 	bl	800409a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3324      	adds	r3, #36	; 0x24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff feed 	bl	800409a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042c0:	f002 fa12 	bl	80066e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042c4:	2301      	movs	r3, #1
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	e000ed04 	.word	0xe000ed04

080042d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <xQueueGenericCreate+0x28>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	e7fe      	b.n	80042fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e004      	b.n	8004312 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3348      	adds	r3, #72	; 0x48
 8004316:	4618      	mov	r0, r3
 8004318:	f002 fad2 	bl	80068c0 <pvPortMalloc>
 800431c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	3348      	adds	r3, #72	; 0x48
 800432c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800432e:	79fa      	ldrb	r2, [r7, #7]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f805 	bl	800434a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004340:	69bb      	ldr	r3, [r7, #24]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e002      	b.n	800436c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004378:	2101      	movs	r1, #1
 800437a:	69b8      	ldr	r0, [r7, #24]
 800437c:	f7ff ff42 	bl	8004204 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <xQueueCreateCountingSemaphore+0x24>
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e7fe      	b.n	80043aa <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d909      	bls.n	80043c8 <xQueueCreateCountingSemaphore+0x40>
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e7fe      	b.n	80043c6 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043c8:	2202      	movs	r2, #2
 80043ca:	2100      	movs	r1, #0
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff81 	bl	80042d4 <xQueueGenericCreate>
 80043d2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80043e0:	697b      	ldr	r3, [r7, #20]
	}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043fa:	2300      	movs	r3, #0
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <xQueueGenericSend+0x30>
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
 800441a:	e7fe      	b.n	800441a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <xQueueGenericSend+0x3e>
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <xQueueGenericSend+0x42>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <xQueueGenericSend+0x44>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <xQueueGenericSend+0x5c>
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	e7fe      	b.n	8004446 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <xQueueGenericSend+0x6a>
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <xQueueGenericSend+0x6e>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSend+0x70>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <xQueueGenericSend+0x88>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	e7fe      	b.n	8004472 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004474:	f001 fa9e 	bl	80059b4 <xTaskGetSchedulerState>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <xQueueGenericSend+0x98>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <xQueueGenericSend+0x9c>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <xQueueGenericSend+0x9e>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <xQueueGenericSend+0xb6>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044a2:	f002 f8f3 	bl	800668c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <xQueueGenericSend+0xcc>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d129      	bne.n	800450c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044be:	f000 fba9 	bl	8004c14 <prvCopyDataToQueue>
 80044c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d010      	beq.n	80044ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	3324      	adds	r3, #36	; 0x24
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f8d7 	bl	8005684 <xTaskRemoveFromEventList>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044dc:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <xQueueGenericSend+0x1f0>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	e00a      	b.n	8004504 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044f4:	4b39      	ldr	r3, [pc, #228]	; (80045dc <xQueueGenericSend+0x1f0>)
 80044f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004504:	f002 f8f0 	bl	80066e8 <vPortExitCritical>
				return pdPASS;
 8004508:	2301      	movs	r3, #1
 800450a:	e063      	b.n	80045d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004512:	f002 f8e9 	bl	80066e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004516:	2300      	movs	r3, #0
 8004518:	e05c      	b.n	80045d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800451a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f90f 	bl	8005748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800452e:	f002 f8db 	bl	80066e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004532:	f000 fe8d 	bl	8005250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004536:	f002 f8a9 	bl	800668c <vPortEnterCritical>
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004540:	b25b      	sxtb	r3, r3
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d103      	bne.n	8004550 <xQueueGenericSend+0x164>
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004556:	b25b      	sxtb	r3, r3
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d103      	bne.n	8004566 <xQueueGenericSend+0x17a>
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004566:	f002 f8bf 	bl	80066e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800456a:	1d3a      	adds	r2, r7, #4
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f001 f8fe 	bl	8005774 <xTaskCheckForTimeOut>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d124      	bne.n	80045c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800457e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004580:	f000 fc40 	bl	8004e04 <prvIsQueueFull>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	3310      	adds	r3, #16
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f001 f828 	bl	80055e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459a:	f000 fbcb 	bl	8004d34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800459e:	f000 fe65 	bl	800526c <xTaskResumeAll>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f47f af7c 	bne.w	80044a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <xQueueGenericSend+0x1f0>)
 80045ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	e772      	b.n	80044a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045be:	f000 fbb9 	bl	8004d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045c2:	f000 fe53 	bl	800526c <xTaskResumeAll>
 80045c6:	e76c      	b.n	80044a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ca:	f000 fbb3 	bl	8004d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ce:	f000 fe4d 	bl	800526c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3738      	adds	r7, #56	; 0x38
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	; 0x38
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <xQueueGenericSendFromISR+0x2c>
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
 800460a:	e7fe      	b.n	800460a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueGenericSendFromISR+0x3a>
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xQueueGenericSendFromISR+0x3e>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueGenericSendFromISR+0x40>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <xQueueGenericSendFromISR+0x58>
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	e7fe      	b.n	8004636 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d103      	bne.n	8004646 <xQueueGenericSendFromISR+0x66>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <xQueueGenericSendFromISR+0x6a>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <xQueueGenericSendFromISR+0x6c>
 800464a:	2300      	movs	r3, #0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <xQueueGenericSendFromISR+0x84>
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e7fe      	b.n	8004662 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004664:	f002 f8ee 	bl	8006844 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004668:	f3ef 8211 	mrs	r2, BASEPRI
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	61ba      	str	r2, [r7, #24]
 800467e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004680:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468c:	429a      	cmp	r2, r3
 800468e:	d302      	bcc.n	8004696 <xQueueGenericSendFromISR+0xb6>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d12c      	bne.n	80046f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800469c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a6:	f000 fab5 	bl	8004c14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d112      	bne.n	80046da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d016      	beq.n	80046ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	3324      	adds	r3, #36	; 0x24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ffdf 	bl	8005684 <xTaskRemoveFromEventList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00e      	beq.n	80046ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	e007      	b.n	80046ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046de:	3301      	adds	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	b25a      	sxtb	r2, r3
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046ea:	2301      	movs	r3, #1
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80046ee:	e001      	b.n	80046f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004700:	4618      	mov	r0, r3
 8004702:	3738      	adds	r7, #56	; 0x38
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08e      	sub	sp, #56	; 0x38
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <xQueueGiveFromISR+0x28>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	e7fe      	b.n	800472e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <xQueueGiveFromISR+0x44>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e7fe      	b.n	800474a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <xQueueGiveFromISR+0x54>
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <xQueueGiveFromISR+0x58>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <xQueueGiveFromISR+0x5a>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <xQueueGiveFromISR+0x72>
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e7fe      	b.n	8004778 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800477a:	f002 f863 	bl	8006844 <vPortValidateInterruptPriority>
	__asm volatile
 800477e:	f3ef 8211 	mrs	r2, BASEPRI
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	617a      	str	r2, [r7, #20]
 8004794:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004796:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d22b      	bcs.n	8004802 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d112      	bne.n	80047ec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d016      	beq.n	80047fc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	3324      	adds	r3, #36	; 0x24
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 ff56 	bl	8005684 <xTaskRemoveFromEventList>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e007      	b.n	80047fc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047f0:	3301      	adds	r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	b25a      	sxtb	r2, r3
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047fc:	2301      	movs	r3, #1
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004800:	e001      	b.n	8004806 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004802:	2300      	movs	r3, #0
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004812:	4618      	mov	r0, r3
 8004814:	3738      	adds	r7, #56	; 0x38
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <xQueueReceive+0x2e>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	e7fe      	b.n	8004848 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <xQueueReceive+0x3c>
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <xQueueReceive+0x40>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <xQueueReceive+0x42>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <xQueueReceive+0x5a>
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	e7fe      	b.n	8004874 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004876:	f001 f89d 	bl	80059b4 <xTaskGetSchedulerState>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <xQueueReceive+0x6a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <xQueueReceive+0x6e>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueReceive+0x70>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <xQueueReceive+0x88>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e7fe      	b.n	80048a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048a4:	f001 fef2 	bl	800668c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01f      	beq.n	80048f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b8:	f000 fa16 	bl	8004ce8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	1e5a      	subs	r2, r3, #1
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00f      	beq.n	80048ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	3310      	adds	r3, #16
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fed7 	bl	8005684 <xTaskRemoveFromEventList>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048dc:	4b3c      	ldr	r3, [pc, #240]	; (80049d0 <xQueueReceive+0x1b4>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048ec:	f001 fefc 	bl	80066e8 <vPortExitCritical>
				return pdPASS;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e069      	b.n	80049c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d103      	bne.n	8004902 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048fa:	f001 fef5 	bl	80066e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048fe:	2300      	movs	r3, #0
 8004900:	e062      	b.n	80049c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	4618      	mov	r0, r3
 800490e:	f000 ff1b 	bl	8005748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004912:	2301      	movs	r3, #1
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004916:	f001 fee7 	bl	80066e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800491a:	f000 fc99 	bl	8005250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491e:	f001 feb5 	bl	800668c <vPortEnterCritical>
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	b25b      	sxtb	r3, r3
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d103      	bne.n	8004938 <xQueueReceive+0x11c>
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493e:	b25b      	sxtb	r3, r3
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d103      	bne.n	800494e <xQueueReceive+0x132>
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494e:	f001 fecb 	bl	80066e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004952:	1d3a      	adds	r2, r7, #4
 8004954:	f107 0310 	add.w	r3, r7, #16
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f000 ff0a 	bl	8005774 <xTaskCheckForTimeOut>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d123      	bne.n	80049ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004968:	f000 fa36 	bl	8004dd8 <prvIsQueueEmpty>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fe34 	bl	80055e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004982:	f000 f9d7 	bl	8004d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004986:	f000 fc71 	bl	800526c <xTaskResumeAll>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d189      	bne.n	80048a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <xQueueReceive+0x1b4>)
 8004992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	e780      	b.n	80048a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a4:	f000 f9c6 	bl	8004d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049a8:	f000 fc60 	bl	800526c <xTaskResumeAll>
 80049ac:	e77a      	b.n	80048a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f000 f9c0 	bl	8004d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049b4:	f000 fc5a 	bl	800526c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f000 fa0d 	bl	8004dd8 <prvIsQueueEmpty>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f43f af6f 	beq.w	80048a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3730      	adds	r7, #48	; 0x30
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	e000ed04 	.word	0xe000ed04

080049d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08e      	sub	sp, #56	; 0x38
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <xQueueSemaphoreTake+0x30>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	e7fe      	b.n	8004a02 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <xQueueSemaphoreTake+0x4c>
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e7fe      	b.n	8004a1e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a20:	f000 ffc8 	bl	80059b4 <xTaskGetSchedulerState>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <xQueueSemaphoreTake+0x5c>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <xQueueSemaphoreTake+0x60>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <xQueueSemaphoreTake+0x62>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <xQueueSemaphoreTake+0x7a>
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e7fe      	b.n	8004a4c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a4e:	f001 fe1d 	bl	800668c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d024      	beq.n	8004aa8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	1e5a      	subs	r2, r3, #1
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a6e:	f001 f95b 	bl	8005d28 <pvTaskIncrementMutexHeldCount>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00f      	beq.n	8004aa0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a82:	3310      	adds	r3, #16
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fdfd 	bl	8005684 <xTaskRemoveFromEventList>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a90:	4b53      	ldr	r3, [pc, #332]	; (8004be0 <xQueueSemaphoreTake+0x20c>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aa0:	f001 fe22 	bl	80066e8 <vPortExitCritical>
				return pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e096      	b.n	8004bd6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d110      	bne.n	8004ad0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <xQueueSemaphoreTake+0xf4>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e7fe      	b.n	8004ac6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ac8:	f001 fe0e 	bl	80066e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e082      	b.n	8004bd6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ad6:	f107 030c 	add.w	r3, r7, #12
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fe34 	bl	8005748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ae4:	f001 fe00 	bl	80066e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ae8:	f000 fbb2 	bl	8005250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004aec:	f001 fdce 	bl	800668c <vPortEnterCritical>
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d103      	bne.n	8004b06 <xQueueSemaphoreTake+0x132>
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d103      	bne.n	8004b1c <xQueueSemaphoreTake+0x148>
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b1c:	f001 fde4 	bl	80066e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b20:	463a      	mov	r2, r7
 8004b22:	f107 030c 	add.w	r3, r7, #12
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fe23 	bl	8005774 <xTaskCheckForTimeOut>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d132      	bne.n	8004b9a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b36:	f000 f94f 	bl	8004dd8 <prvIsQueueEmpty>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d026      	beq.n	8004b8e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004b48:	f001 fda0 	bl	800668c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 ff4d 	bl	80059f0 <xTaskPriorityInherit>
 8004b56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b58:	f001 fdc6 	bl	80066e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fd3f 	bl	80055e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b6c:	f000 f8e2 	bl	8004d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b70:	f000 fb7c 	bl	800526c <xTaskResumeAll>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f47f af69 	bne.w	8004a4e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <xQueueSemaphoreTake+0x20c>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	e75f      	b.n	8004a4e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b90:	f000 f8d0 	bl	8004d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b94:	f000 fb6a 	bl	800526c <xTaskResumeAll>
 8004b98:	e759      	b.n	8004a4e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b9c:	f000 f8ca 	bl	8004d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba0:	f000 fb64 	bl	800526c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ba6:	f000 f917 	bl	8004dd8 <prvIsQueueEmpty>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f43f af4e 	beq.w	8004a4e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004bb8:	f001 fd68 	bl	800668c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bbe:	f000 f811 	bl	8004be4 <prvGetDisinheritPriorityAfterTimeout>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 f814 	bl	8005bf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004bd0:	f001 fd8a 	bl	80066e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3738      	adds	r7, #56	; 0x38
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1c3 0307 	rsb	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e001      	b.n	8004c06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c06:	68fb      	ldr	r3, [r7, #12]
	}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d14d      	bne.n	8004cd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 ff56 	bl	8005af0 <xTaskPriorityDisinherit>
 8004c44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	e043      	b.n	8004cd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d119      	bne.n	8004c88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6858      	ldr	r0, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	f002 f84c 	bl	8006cfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d32b      	bcc.n	8004cd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	e026      	b.n	8004cd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68d8      	ldr	r0, [r3, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	461a      	mov	r2, r3
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	f002 f832 	bl	8006cfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	425b      	negs	r3, r3
 8004ca2:	441a      	add	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d207      	bcs.n	8004cc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	425b      	negs	r3, r3
 8004cbe:	441a      	add	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d105      	bne.n	8004cd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004cde:	697b      	ldr	r3, [r7, #20]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d018      	beq.n	8004d2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	441a      	add	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d303      	bcc.n	8004d1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68d9      	ldr	r1, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	461a      	mov	r2, r3
 8004d26:	6838      	ldr	r0, [r7, #0]
 8004d28:	f001 ffe8 	bl	8006cfc <memcpy>
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d3c:	f001 fca6 	bl	800668c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d48:	e011      	b.n	8004d6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d012      	beq.n	8004d78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc94 	bl	8005684 <xTaskRemoveFromEventList>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d62:	f000 fd67 	bl	8005834 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	dce9      	bgt.n	8004d4a <prvUnlockQueue+0x16>
 8004d76:	e000      	b.n	8004d7a <prvUnlockQueue+0x46>
					break;
 8004d78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d82:	f001 fcb1 	bl	80066e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d86:	f001 fc81 	bl	800668c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d92:	e011      	b.n	8004db8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3310      	adds	r3, #16
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fc6f 	bl	8005684 <xTaskRemoveFromEventList>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dac:	f000 fd42 	bl	8005834 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dce9      	bgt.n	8004d94 <prvUnlockQueue+0x60>
 8004dc0:	e000      	b.n	8004dc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 fc8c 	bl	80066e8 <vPortExitCritical>
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004de0:	f001 fc54 	bl	800668c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e001      	b.n	8004df6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004df6:	f001 fc77 	bl	80066e8 <vPortExitCritical>

	return xReturn;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e0c:	f001 fc3e 	bl	800668c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d102      	bne.n	8004e22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e001      	b.n	8004e26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e26:	f001 fc5f 	bl	80066e8 <vPortExitCritical>

	return xReturn;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e014      	b.n	8004e6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <vQueueAddToRegistry+0x4c>)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e50:	490b      	ldr	r1, [pc, #44]	; (8004e80 <vQueueAddToRegistry+0x4c>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <vQueueAddToRegistry+0x4c>)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e66:	e005      	b.n	8004e74 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b07      	cmp	r3, #7
 8004e72:	d9e7      	bls.n	8004e44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	2000cb00 	.word	0x2000cb00

08004e84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e94:	f001 fbfa 	bl	800668c <vPortEnterCritical>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d103      	bne.n	8004eae <vQueueWaitForMessageRestricted+0x2a>
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eb4:	b25b      	sxtb	r3, r3
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d103      	bne.n	8004ec4 <vQueueWaitForMessageRestricted+0x40>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ec4:	f001 fc10 	bl	80066e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3324      	adds	r3, #36	; 0x24
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fba9 	bl	8005630 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	f7ff ff28 	bl	8004d34 <prvUnlockQueue>
	}
 8004ee4:	bf00      	nop
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	; 0x30
 8004ef0:	af04      	add	r7, sp, #16
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fcdd 	bl	80068c0 <pvPortMalloc>
 8004f06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00e      	beq.n	8004f2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f0e:	2064      	movs	r0, #100	; 0x64
 8004f10:	f001 fcd6 	bl	80068c0 <pvPortMalloc>
 8004f14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
 8004f22:	e005      	b.n	8004f30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f001 fd8d 	bl	8006a44 <vPortFree>
 8004f2a:	e001      	b.n	8004f30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d013      	beq.n	8004f5e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f36:	88fa      	ldrh	r2, [r7, #6]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9303      	str	r3, [sp, #12]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	9302      	str	r3, [sp, #8]
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f80e 	bl	8004f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f52:	69f8      	ldr	r0, [r7, #28]
 8004f54:	f000 f892 	bl	800507c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	e002      	b.n	8004f64 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f64:	69bb      	ldr	r3, [r7, #24]
	}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b088      	sub	sp, #32
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f86:	3b01      	subs	r3, #1
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <prvInitialiseNewTask+0x46>
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e7fe      	b.n	8004fb2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01f      	beq.n	8004ffa <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e012      	b.n	8004fe6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	7819      	ldrb	r1, [r3, #0]
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	3334      	adds	r3, #52	; 0x34
 8004fd0:	460a      	mov	r2, r1
 8004fd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d006      	beq.n	8004fee <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2b1f      	cmp	r3, #31
 8004fea:	d9e9      	bls.n	8004fc0 <prvInitialiseNewTask+0x52>
 8004fec:	e000      	b.n	8004ff0 <prvInitialiseNewTask+0x82>
			{
				break;
 8004fee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004ff8:	e003      	b.n	8005002 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	2b06      	cmp	r3, #6
 8005006:	d901      	bls.n	800500c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005008:	2306      	movs	r3, #6
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005016:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	3304      	adds	r3, #4
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f859 	bl	80040da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	3318      	adds	r3, #24
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff f854 	bl	80040da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	f1c3 0207 	rsb	r2, r3, #7
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	2200      	movs	r2, #0
 800504c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	68f9      	ldr	r1, [r7, #12]
 800505a:	69b8      	ldr	r0, [r7, #24]
 800505c:	f001 f9ec 	bl	8006438 <pxPortInitialiseStack>
 8005060:	4602      	mov	r2, r0
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005070:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005072:	bf00      	nop
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005084:	f001 fb02 	bl	800668c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005088:	4b2a      	ldr	r3, [pc, #168]	; (8005134 <prvAddNewTaskToReadyList+0xb8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3301      	adds	r3, #1
 800508e:	4a29      	ldr	r2, [pc, #164]	; (8005134 <prvAddNewTaskToReadyList+0xb8>)
 8005090:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <prvAddNewTaskToReadyList+0xbc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800509a:	4a27      	ldr	r2, [pc, #156]	; (8005138 <prvAddNewTaskToReadyList+0xbc>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050a0:	4b24      	ldr	r3, [pc, #144]	; (8005134 <prvAddNewTaskToReadyList+0xb8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d110      	bne.n	80050ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050a8:	f000 fbe8 	bl	800587c <prvInitialiseTaskLists>
 80050ac:	e00d      	b.n	80050ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050ae:	4b23      	ldr	r3, [pc, #140]	; (800513c <prvAddNewTaskToReadyList+0xc0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050b6:	4b20      	ldr	r3, [pc, #128]	; (8005138 <prvAddNewTaskToReadyList+0xbc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d802      	bhi.n	80050ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050c4:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <prvAddNewTaskToReadyList+0xbc>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050ca:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <prvAddNewTaskToReadyList+0xc4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3301      	adds	r3, #1
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <prvAddNewTaskToReadyList+0xc4>)
 80050d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <prvAddNewTaskToReadyList+0xc8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <prvAddNewTaskToReadyList+0xc8>)
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4a15      	ldr	r2, [pc, #84]	; (8005148 <prvAddNewTaskToReadyList+0xcc>)
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe fff9 	bl	80040f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005102:	f001 faf1 	bl	80066e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <prvAddNewTaskToReadyList+0xc0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00e      	beq.n	800512c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <prvAddNewTaskToReadyList+0xbc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	429a      	cmp	r2, r3
 800511a:	d207      	bcs.n	800512c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <prvAddNewTaskToReadyList+0xd0>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	2000019c 	.word	0x2000019c
 8005138:	2000009c 	.word	0x2000009c
 800513c:	200001a8 	.word	0x200001a8
 8005140:	200001b8 	.word	0x200001b8
 8005144:	200001a4 	.word	0x200001a4
 8005148:	200000a0 	.word	0x200000a0
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d016      	beq.n	8005190 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <vTaskDelay+0x60>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <vTaskDelay+0x2e>
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	e7fe      	b.n	800517c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800517e:	f000 f867 	bl	8005250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005182:	2100      	movs	r1, #0
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fde3 	bl	8005d50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800518a:	f000 f86f 	bl	800526c <xTaskResumeAll>
 800518e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d107      	bne.n	80051a6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005196:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <vTaskDelay+0x64>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200001c4 	.word	0x200001c4
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80051be:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <vTaskStartScheduler+0x80>)
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051cc:	491b      	ldr	r1, [pc, #108]	; (800523c <vTaskStartScheduler+0x84>)
 80051ce:	481c      	ldr	r0, [pc, #112]	; (8005240 <vTaskStartScheduler+0x88>)
 80051d0:	f7ff fe8c 	bl	8004eec <xTaskCreate>
 80051d4:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d102      	bne.n	80051e2 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 80051dc:	f000 fe1e 	bl	8005e1c <xTimerCreateTimerTask>
 80051e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d115      	bne.n	8005214 <vTaskStartScheduler+0x5c>
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <vTaskStartScheduler+0x8c>)
 80051fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005200:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <vTaskStartScheduler+0x90>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005208:	4b10      	ldr	r3, [pc, #64]	; (800524c <vTaskStartScheduler+0x94>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800520e:	f001 f99f 	bl	8006550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005212:	e00d      	b.n	8005230 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d109      	bne.n	8005230 <vTaskStartScheduler+0x78>
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	e7fe      	b.n	800522e <vTaskStartScheduler+0x76>
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200001c0 	.word	0x200001c0
 800523c:	08006dfc 	.word	0x08006dfc
 8005240:	0800584d 	.word	0x0800584d
 8005244:	200001bc 	.word	0x200001bc
 8005248:	200001a8 	.word	0x200001a8
 800524c:	200001a0 	.word	0x200001a0

08005250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <vTaskSuspendAll+0x18>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	4a03      	ldr	r2, [pc, #12]	; (8005268 <vTaskSuspendAll+0x18>)
 800525c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	200001c4 	.word	0x200001c4

0800526c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <xTaskResumeAll+0x114>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <xTaskResumeAll+0x2a>
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	e7fe      	b.n	8005294 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005296:	f001 f9f9 	bl	800668c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800529a:	4b39      	ldr	r3, [pc, #228]	; (8005380 <xTaskResumeAll+0x114>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3b01      	subs	r3, #1
 80052a0:	4a37      	ldr	r2, [pc, #220]	; (8005380 <xTaskResumeAll+0x114>)
 80052a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a4:	4b36      	ldr	r3, [pc, #216]	; (8005380 <xTaskResumeAll+0x114>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d161      	bne.n	8005370 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052ac:	4b35      	ldr	r3, [pc, #212]	; (8005384 <xTaskResumeAll+0x118>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d05d      	beq.n	8005370 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052b4:	e02e      	b.n	8005314 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b6:	4b34      	ldr	r3, [pc, #208]	; (8005388 <xTaskResumeAll+0x11c>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3318      	adds	r3, #24
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe ff73 	bl	80041ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe ff6e 	bl	80041ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	2201      	movs	r2, #1
 80052d8:	409a      	lsls	r2, r3
 80052da:	4b2c      	ldr	r3, [pc, #176]	; (800538c <xTaskResumeAll+0x120>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <xTaskResumeAll+0x120>)
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4a27      	ldr	r2, [pc, #156]	; (8005390 <xTaskResumeAll+0x124>)
 80052f2:	441a      	add	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f7fe fefa 	bl	80040f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005304:	4b23      	ldr	r3, [pc, #140]	; (8005394 <xTaskResumeAll+0x128>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800530e:	4b22      	ldr	r3, [pc, #136]	; (8005398 <xTaskResumeAll+0x12c>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <xTaskResumeAll+0x11c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1cc      	bne.n	80052b6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005322:	f000 fb27 	bl	8005974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <xTaskResumeAll+0x130>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d010      	beq.n	8005354 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005332:	f000 f847 	bl	80053c4 <xTaskIncrementTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800533c:	4b16      	ldr	r3, [pc, #88]	; (8005398 <xTaskResumeAll+0x12c>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3b01      	subs	r3, #1
 8005346:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f1      	bne.n	8005332 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <xTaskResumeAll+0x130>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <xTaskResumeAll+0x12c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <xTaskResumeAll+0x134>)
 8005362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005370:	f001 f9ba 	bl	80066e8 <vPortExitCritical>

	return xAlreadyYielded;
 8005374:	68bb      	ldr	r3, [r7, #8]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200001c4 	.word	0x200001c4
 8005384:	2000019c 	.word	0x2000019c
 8005388:	2000015c 	.word	0x2000015c
 800538c:	200001a4 	.word	0x200001a4
 8005390:	200000a0 	.word	0x200000a0
 8005394:	2000009c 	.word	0x2000009c
 8005398:	200001b0 	.word	0x200001b0
 800539c:	200001ac 	.word	0x200001ac
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <xTaskGetTickCount+0x1c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053b0:	687b      	ldr	r3, [r7, #4]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200001a0 	.word	0x200001a0

080053c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ce:	4b4e      	ldr	r3, [pc, #312]	; (8005508 <xTaskIncrementTick+0x144>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 8087 	bne.w	80054e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053d8:	4b4c      	ldr	r3, [pc, #304]	; (800550c <xTaskIncrementTick+0x148>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053e0:	4a4a      	ldr	r2, [pc, #296]	; (800550c <xTaskIncrementTick+0x148>)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d11f      	bne.n	800542c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80053ec:	4b48      	ldr	r3, [pc, #288]	; (8005510 <xTaskIncrementTick+0x14c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <xTaskIncrementTick+0x46>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	e7fe      	b.n	8005408 <xTaskIncrementTick+0x44>
 800540a:	4b41      	ldr	r3, [pc, #260]	; (8005510 <xTaskIncrementTick+0x14c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	4b40      	ldr	r3, [pc, #256]	; (8005514 <xTaskIncrementTick+0x150>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a3e      	ldr	r2, [pc, #248]	; (8005510 <xTaskIncrementTick+0x14c>)
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	4a3e      	ldr	r2, [pc, #248]	; (8005514 <xTaskIncrementTick+0x150>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b3e      	ldr	r3, [pc, #248]	; (8005518 <xTaskIncrementTick+0x154>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <xTaskIncrementTick+0x154>)
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	f000 faa4 	bl	8005974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800542c:	4b3b      	ldr	r3, [pc, #236]	; (800551c <xTaskIncrementTick+0x158>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	429a      	cmp	r2, r3
 8005434:	d348      	bcc.n	80054c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <xTaskIncrementTick+0x14c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d104      	bne.n	800544a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <xTaskIncrementTick+0x158>)
 8005442:	f04f 32ff 	mov.w	r2, #4294967295
 8005446:	601a      	str	r2, [r3, #0]
					break;
 8005448:	e03e      	b.n	80054c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b31      	ldr	r3, [pc, #196]	; (8005510 <xTaskIncrementTick+0x14c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	429a      	cmp	r2, r3
 8005460:	d203      	bcs.n	800546a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005462:	4a2e      	ldr	r2, [pc, #184]	; (800551c <xTaskIncrementTick+0x158>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005468:	e02e      	b.n	80054c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	3304      	adds	r3, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fe9d 	bl	80041ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3318      	adds	r3, #24
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe fe94 	bl	80041ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	2201      	movs	r2, #1
 800548c:	409a      	lsls	r2, r3
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <xTaskIncrementTick+0x15c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4313      	orrs	r3, r2
 8005494:	4a22      	ldr	r2, [pc, #136]	; (8005520 <xTaskIncrementTick+0x15c>)
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <xTaskIncrementTick+0x160>)
 80054a6:	441a      	add	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fe fe20 	bl	80040f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <xTaskIncrementTick+0x164>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3b9      	bcc.n	8005436 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c6:	e7b6      	b.n	8005436 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <xTaskIncrementTick+0x164>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4915      	ldr	r1, [pc, #84]	; (8005524 <xTaskIncrementTick+0x160>)
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e004      	b.n	80054f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <xTaskIncrementTick+0x168>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	4a0f      	ldr	r2, [pc, #60]	; (800552c <xTaskIncrementTick+0x168>)
 80054ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054f0:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTaskIncrementTick+0x16c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	200001c4 	.word	0x200001c4
 800550c:	200001a0 	.word	0x200001a0
 8005510:	20000154 	.word	0x20000154
 8005514:	20000158 	.word	0x20000158
 8005518:	200001b4 	.word	0x200001b4
 800551c:	200001bc 	.word	0x200001bc
 8005520:	200001a4 	.word	0x200001a4
 8005524:	200000a0 	.word	0x200000a0
 8005528:	2000009c 	.word	0x2000009c
 800552c:	200001ac 	.word	0x200001ac
 8005530:	200001b0 	.word	0x200001b0

08005534 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800553a:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <vTaskSwitchContext+0xa0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005542:	4b25      	ldr	r3, [pc, #148]	; (80055d8 <vTaskSwitchContext+0xa4>)
 8005544:	2201      	movs	r2, #1
 8005546:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005548:	e03e      	b.n	80055c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <vTaskSwitchContext+0xa4>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	4b22      	ldr	r3, [pc, #136]	; (80055dc <vTaskSwitchContext+0xa8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	fab3 f383 	clz	r3, r3
 800555c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800555e:	7afb      	ldrb	r3, [r7, #11]
 8005560:	f1c3 031f 	rsb	r3, r3, #31
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	491e      	ldr	r1, [pc, #120]	; (80055e0 <vTaskSwitchContext+0xac>)
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <vTaskSwitchContext+0x5a>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e7fe      	b.n	800558c <vTaskSwitchContext+0x58>
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <vTaskSwitchContext+0xac>)
 800559a:	4413      	add	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	3308      	adds	r3, #8
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d104      	bne.n	80055be <vTaskSwitchContext+0x8a>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a07      	ldr	r2, [pc, #28]	; (80055e4 <vTaskSwitchContext+0xb0>)
 80055c6:	6013      	str	r3, [r2, #0]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	200001c4 	.word	0x200001c4
 80055d8:	200001b0 	.word	0x200001b0
 80055dc:	200001a4 	.word	0x200001a4
 80055e0:	200000a0 	.word	0x200000a0
 80055e4:	2000009c 	.word	0x2000009c

080055e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <vTaskPlaceOnEventList+0x24>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e7fe      	b.n	800560a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800560c:	4b07      	ldr	r3, [pc, #28]	; (800562c <vTaskPlaceOnEventList+0x44>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3318      	adds	r3, #24
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7fe fd91 	bl	800413c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800561a:	2101      	movs	r1, #1
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	f000 fb97 	bl	8005d50 <prvAddCurrentTaskToDelayedList>
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2000009c 	.word	0x2000009c

08005630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <vTaskPlaceOnEventListRestricted+0x26>
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e7fe      	b.n	8005654 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <vTaskPlaceOnEventListRestricted+0x50>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3318      	adds	r3, #24
 800565c:	4619      	mov	r1, r3
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7fe fd48 	bl	80040f4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68b8      	ldr	r0, [r7, #8]
 8005674:	f000 fb6c 	bl	8005d50 <prvAddCurrentTaskToDelayedList>
	}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	2000009c 	.word	0x2000009c

08005684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <xTaskRemoveFromEventList+0x2a>
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e7fe      	b.n	80056ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3318      	adds	r3, #24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fd7b 	bl	80041ae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <xTaskRemoveFromEventList+0xac>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11c      	bne.n	80056fa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fd72 	bl	80041ae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ce:	2201      	movs	r2, #1
 80056d0:	409a      	lsls	r2, r3
 80056d2:	4b18      	ldr	r3, [pc, #96]	; (8005734 <xTaskRemoveFromEventList+0xb0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <xTaskRemoveFromEventList+0xb0>)
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <xTaskRemoveFromEventList+0xb4>)
 80056ea:	441a      	add	r2, r3
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f7fe fcfe 	bl	80040f4 <vListInsertEnd>
 80056f8:	e005      	b.n	8005706 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3318      	adds	r3, #24
 80056fe:	4619      	mov	r1, r3
 8005700:	480e      	ldr	r0, [pc, #56]	; (800573c <xTaskRemoveFromEventList+0xb8>)
 8005702:	f7fe fcf7 	bl	80040f4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <xTaskRemoveFromEventList+0xbc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d905      	bls.n	8005720 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <xTaskRemoveFromEventList+0xc0>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	e001      	b.n	8005724 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005724:	697b      	ldr	r3, [r7, #20]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	200001c4 	.word	0x200001c4
 8005734:	200001a4 	.word	0x200001a4
 8005738:	200000a0 	.word	0x200000a0
 800573c:	2000015c 	.word	0x2000015c
 8005740:	2000009c 	.word	0x2000009c
 8005744:	200001b0 	.word	0x200001b0

08005748 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005750:	4b06      	ldr	r3, [pc, #24]	; (800576c <vTaskInternalSetTimeOutState+0x24>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <vTaskInternalSetTimeOutState+0x28>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	605a      	str	r2, [r3, #4]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	200001b4 	.word	0x200001b4
 8005770:	200001a0 	.word	0x200001a0

08005774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <xTaskCheckForTimeOut+0x24>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e7fe      	b.n	8005796 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <xTaskCheckForTimeOut+0x3e>
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	e7fe      	b.n	80057b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80057b2:	f000 ff6b 	bl	800668c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <xTaskCheckForTimeOut+0xb8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d102      	bne.n	80057d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	e023      	b.n	800581e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b15      	ldr	r3, [pc, #84]	; (8005830 <xTaskCheckForTimeOut+0xbc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d007      	beq.n	80057f2 <xTaskCheckForTimeOut+0x7e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d302      	bcc.n	80057f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	e015      	b.n	800581e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d20b      	bcs.n	8005814 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1ad2      	subs	r2, r2, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff9d 	bl	8005748 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e004      	b.n	800581e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800581e:	f000 ff63 	bl	80066e8 <vPortExitCritical>

	return xReturn;
 8005822:	69fb      	ldr	r3, [r7, #28]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200001a0 	.word	0x200001a0
 8005830:	200001b4 	.word	0x200001b4

08005834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005838:	4b03      	ldr	r3, [pc, #12]	; (8005848 <vTaskMissedYield+0x14>)
 800583a:	2201      	movs	r2, #1
 800583c:	601a      	str	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	200001b0 	.word	0x200001b0

0800584c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005854:	f000 f852 	bl	80058fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <prvIdleTask+0x28>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d9f9      	bls.n	8005854 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <prvIdleTask+0x2c>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005870:	e7f0      	b.n	8005854 <prvIdleTask+0x8>
 8005872:	bf00      	nop
 8005874:	200000a0 	.word	0x200000a0
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005882:	2300      	movs	r3, #0
 8005884:	607b      	str	r3, [r7, #4]
 8005886:	e00c      	b.n	80058a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4a12      	ldr	r2, [pc, #72]	; (80058dc <prvInitialiseTaskLists+0x60>)
 8005894:	4413      	add	r3, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fbff 	bl	800409a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3301      	adds	r3, #1
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d9ef      	bls.n	8005888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058a8:	480d      	ldr	r0, [pc, #52]	; (80058e0 <prvInitialiseTaskLists+0x64>)
 80058aa:	f7fe fbf6 	bl	800409a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058ae:	480d      	ldr	r0, [pc, #52]	; (80058e4 <prvInitialiseTaskLists+0x68>)
 80058b0:	f7fe fbf3 	bl	800409a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058b4:	480c      	ldr	r0, [pc, #48]	; (80058e8 <prvInitialiseTaskLists+0x6c>)
 80058b6:	f7fe fbf0 	bl	800409a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058ba:	480c      	ldr	r0, [pc, #48]	; (80058ec <prvInitialiseTaskLists+0x70>)
 80058bc:	f7fe fbed 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058c0:	480b      	ldr	r0, [pc, #44]	; (80058f0 <prvInitialiseTaskLists+0x74>)
 80058c2:	f7fe fbea 	bl	800409a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <prvInitialiseTaskLists+0x78>)
 80058c8:	4a05      	ldr	r2, [pc, #20]	; (80058e0 <prvInitialiseTaskLists+0x64>)
 80058ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvInitialiseTaskLists+0x7c>)
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <prvInitialiseTaskLists+0x68>)
 80058d0:	601a      	str	r2, [r3, #0]
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200000a0 	.word	0x200000a0
 80058e0:	2000012c 	.word	0x2000012c
 80058e4:	20000140 	.word	0x20000140
 80058e8:	2000015c 	.word	0x2000015c
 80058ec:	20000170 	.word	0x20000170
 80058f0:	20000188 	.word	0x20000188
 80058f4:	20000154 	.word	0x20000154
 80058f8:	20000158 	.word	0x20000158

080058fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005902:	e019      	b.n	8005938 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005904:	f000 fec2 	bl	800668c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <prvCheckTasksWaitingTermination+0x4c>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe fc4a 	bl	80041ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <prvCheckTasksWaitingTermination+0x50>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3b01      	subs	r3, #1
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <prvCheckTasksWaitingTermination+0x50>)
 8005922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <prvCheckTasksWaitingTermination+0x54>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3b01      	subs	r3, #1
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <prvCheckTasksWaitingTermination+0x54>)
 800592c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800592e:	f000 fedb 	bl	80066e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f80e 	bl	8005954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <prvCheckTasksWaitingTermination+0x54>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e1      	bne.n	8005904 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000170 	.word	0x20000170
 800594c:	2000019c 	.word	0x2000019c
 8005950:	20000184 	.word	0x20000184

08005954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	4618      	mov	r0, r3
 8005962:	f001 f86f 	bl	8006a44 <vPortFree>
			vPortFree( pxTCB );
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 f86c 	bl	8006a44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <prvResetNextTaskUnblockTime+0x38>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005986:	f04f 32ff 	mov.w	r2, #4294967295
 800598a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800598c:	e008      	b.n	80059a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <prvResetNextTaskUnblockTime+0x38>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a04      	ldr	r2, [pc, #16]	; (80059b0 <prvResetNextTaskUnblockTime+0x3c>)
 800599e:	6013      	str	r3, [r2, #0]
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20000154 	.word	0x20000154
 80059b0:	200001bc 	.word	0x200001bc

080059b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <xTaskGetSchedulerState+0x34>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059c2:	2301      	movs	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	e008      	b.n	80059da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c8:	4b08      	ldr	r3, [pc, #32]	; (80059ec <xTaskGetSchedulerState+0x38>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059d0:	2302      	movs	r3, #2
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	e001      	b.n	80059da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059d6:	2300      	movs	r3, #0
 80059d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059da:	687b      	ldr	r3, [r7, #4]
	}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	200001a8 	.word	0x200001a8
 80059ec:	200001c4 	.word	0x200001c4

080059f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d069      	beq.n	8005ada <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <xTaskPriorityInherit+0xf4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d259      	bcs.n	8005ac8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	db06      	blt.n	8005a2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <xTaskPriorityInherit+0xf4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f1c3 0207 	rsb	r2, r3, #7
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6959      	ldr	r1, [r3, #20]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <xTaskPriorityInherit+0xf8>)
 8005a3c:	4413      	add	r3, r2
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	d13a      	bne.n	8005ab8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fbb1 	bl	80041ae <uxListRemove>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d115      	bne.n	8005a7e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a56:	4924      	ldr	r1, [pc, #144]	; (8005ae8 <xTaskPriorityInherit+0xf8>)
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xTaskPriorityInherit+0x8e>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43da      	mvns	r2, r3
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <xTaskPriorityInherit+0xfc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <xTaskPriorityInherit+0xfc>)
 8005a7c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a7e:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <xTaskPriorityInherit+0xf4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	4b16      	ldr	r3, [pc, #88]	; (8005aec <xTaskPriorityInherit+0xfc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <xTaskPriorityInherit+0xfc>)
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <xTaskPriorityInherit+0xf8>)
 8005aa8:	441a      	add	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f7fe fb1f 	bl	80040f4 <vListInsertEnd>
 8005ab6:	e004      	b.n	8005ac2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <xTaskPriorityInherit+0xf4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e008      	b.n	8005ada <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <xTaskPriorityInherit+0xf4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d201      	bcs.n	8005ada <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ada:	68fb      	ldr	r3, [r7, #12]
	}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000009c 	.word	0x2000009c
 8005ae8:	200000a0 	.word	0x200000a0
 8005aec:	200001a4 	.word	0x200001a4

08005af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d06c      	beq.n	8005be0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b06:	4b39      	ldr	r3, [pc, #228]	; (8005bec <xTaskPriorityDisinherit+0xfc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d009      	beq.n	8005b24 <xTaskPriorityDisinherit+0x34>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e7fe      	b.n	8005b22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <xTaskPriorityDisinherit+0x50>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	e7fe      	b.n	8005b3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d044      	beq.n	8005be0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d140      	bne.n	8005be0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fb23 	bl	80041ae <uxListRemove>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d115      	bne.n	8005b9a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	491f      	ldr	r1, [pc, #124]	; (8005bf0 <xTaskPriorityDisinherit+0x100>)
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	440b      	add	r3, r1
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xTaskPriorityDisinherit+0xaa>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2201      	movs	r2, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43da      	mvns	r2, r3
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <xTaskPriorityDisinherit+0x104>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4013      	ands	r3, r2
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <xTaskPriorityDisinherit+0x104>)
 8005b98:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	f1c3 0207 	rsb	r2, r3, #7
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <xTaskPriorityDisinherit+0x104>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <xTaskPriorityDisinherit+0x104>)
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <xTaskPriorityDisinherit+0x100>)
 8005bce:	441a      	add	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f7fe fa8c 	bl	80040f4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005be0:	697b      	ldr	r3, [r7, #20]
	}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	2000009c 	.word	0x2000009c
 8005bf0:	200000a0 	.word	0x200000a0
 8005bf4:	200001a4 	.word	0x200001a4

08005bf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c06:	2301      	movs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8081 	beq.w	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e7fe      	b.n	8005c2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d902      	bls.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e002      	b.n	8005c44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d062      	beq.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d15d      	bne.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c58:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d109      	bne.n	8005c76 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	e7fe      	b.n	8005c74 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	db04      	blt.n	8005c94 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f1c3 0207 	rsb	r2, r3, #7
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005ca4:	4413      	add	r3, r2
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	d134      	bne.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fa7d 	bl	80041ae <uxListRemove>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d115      	bne.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4918      	ldr	r1, [pc, #96]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005ce4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	2201      	movs	r2, #1
 8005cec:	409a      	lsls	r2, r3
 8005cee:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	4a0b      	ldr	r2, [pc, #44]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005d06:	441a      	add	r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fe f9f0 	bl	80040f4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d14:	bf00      	nop
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	2000009c 	.word	0x2000009c
 8005d20:	200000a0 	.word	0x200000a0
 8005d24:	200001a4 	.word	0x200001a4

08005d28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d3a:	3201      	adds	r2, #1
 8005d3c:	659a      	str	r2, [r3, #88]	; 0x58
		}

		return pxCurrentTCB;
 8005d3e:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d40:	681b      	ldr	r3, [r3, #0]
	}
 8005d42:	4618      	mov	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	2000009c 	.word	0x2000009c

08005d50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d5a:	4b29      	ldr	r3, [pc, #164]	; (8005e00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d60:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fa21 	bl	80041ae <uxListRemove>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	2201      	movs	r2, #1
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4013      	ands	r3, r2
 8005d86:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d10a      	bne.n	8005da8 <prvAddCurrentTaskToDelayedList+0x58>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d98:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	481a      	ldr	r0, [pc, #104]	; (8005e0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005da2:	f7fe f9a7 	bl	80040f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005da6:	e026      	b.n	8005df6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005db0:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d209      	bcs.n	8005dd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fe f9b5 	bl	800413c <vListInsert>
}
 8005dd2:	e010      	b.n	8005df6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f7fe f9ab 	bl	800413c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d202      	bcs.n	8005df6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005df0:	4a09      	ldr	r2, [pc, #36]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6013      	str	r3, [r2, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200001a0 	.word	0x200001a0
 8005e04:	2000009c 	.word	0x2000009c
 8005e08:	200001a4 	.word	0x200001a4
 8005e0c:	20000188 	.word	0x20000188
 8005e10:	20000158 	.word	0x20000158
 8005e14:	20000154 	.word	0x20000154
 8005e18:	200001bc 	.word	0x200001bc

08005e1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e26:	f000 fad1 	bl	80063cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <xTimerCreateTimerTask+0x54>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <xTimerCreateTimerTask+0x58>)
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	2302      	movs	r3, #2
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e40:	490d      	ldr	r1, [pc, #52]	; (8005e78 <xTimerCreateTimerTask+0x5c>)
 8005e42:	480e      	ldr	r0, [pc, #56]	; (8005e7c <xTimerCreateTimerTask+0x60>)
 8005e44:	f7ff f852 	bl	8004eec <xTaskCreate>
 8005e48:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d109      	bne.n	8005e64 <xTimerCreateTimerTask+0x48>
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	e7fe      	b.n	8005e62 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8005e64:	687b      	ldr	r3, [r7, #4]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200001f8 	.word	0x200001f8
 8005e74:	200001fc 	.word	0x200001fc
 8005e78:	08006e04 	.word	0x08006e04
 8005e7c:	08005fb1 	.word	0x08005fb1

08005e80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <xTimerGenericCommand+0x2c>
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e7fe      	b.n	8005eaa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <xTimerGenericCommand+0x94>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d02a      	beq.n	8005f0a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	dc18      	bgt.n	8005ef8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ec6:	f7ff fd75 	bl	80059b4 <xTaskGetSchedulerState>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d109      	bne.n	8005ee4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ed0:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <xTimerGenericCommand+0x94>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	f107 0114 	add.w	r1, r7, #20
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005edc:	f7fe fa86 	bl	80043ec <xQueueGenericSend>
 8005ee0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ee2:	e012      	b.n	8005f0a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <xTimerGenericCommand+0x94>)
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	f107 0114 	add.w	r1, r7, #20
 8005eec:	2300      	movs	r3, #0
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f7fe fa7c 	bl	80043ec <xQueueGenericSend>
 8005ef4:	6278      	str	r0, [r7, #36]	; 0x24
 8005ef6:	e008      	b.n	8005f0a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <xTimerGenericCommand+0x94>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	f107 0114 	add.w	r1, r7, #20
 8005f00:	2300      	movs	r3, #0
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	f7fe fb6c 	bl	80045e0 <xQueueGenericSendFromISR>
 8005f08:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	200001f8 	.word	0x200001f8

08005f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f22:	4b22      	ldr	r3, [pc, #136]	; (8005fac <prvProcessExpiredTimer+0x94>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe f93c 	bl	80041ae <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d021      	beq.n	8005f88 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	18d1      	adds	r1, r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	6978      	ldr	r0, [r7, #20]
 8005f52:	f000 f8d1 	bl	80060f8 <prvInsertTimerInActiveList>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01e      	beq.n	8005f9a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	2100      	movs	r1, #0
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f7ff ff8a 	bl	8005e80 <xTimerGenericCommand>
 8005f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d112      	bne.n	8005f9a <prvProcessExpiredTimer+0x82>
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e7fe      	b.n	8005f86 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	4798      	blx	r3
}
 8005fa2:	bf00      	nop
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200001f0 	.word	0x200001f0

08005fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fb8:	f107 0308 	add.w	r3, r7, #8
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f857 	bl	8006070 <prvGetNextExpireTime>
 8005fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f803 	bl	8005fd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fce:	f000 f8d5 	bl	800617c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fd2:	e7f1      	b.n	8005fb8 <prvTimerTask+0x8>

08005fd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fde:	f7ff f937 	bl	8005250 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fe2:	f107 0308 	add.w	r3, r7, #8
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f866 	bl	80060b8 <prvSampleTimeNow>
 8005fec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d130      	bne.n	8006056 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <prvProcessTimerOrBlockTask+0x3c>
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d806      	bhi.n	8006010 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006002:	f7ff f933 	bl	800526c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ff85 	bl	8005f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800600e:	e024      	b.n	800605a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006016:	4b13      	ldr	r3, [pc, #76]	; (8006064 <prvProcessTimerOrBlockTask+0x90>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <prvProcessTimerOrBlockTask+0x50>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <prvProcessTimerOrBlockTask+0x52>
 8006024:	2300      	movs	r3, #0
 8006026:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <prvProcessTimerOrBlockTask+0x94>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4619      	mov	r1, r3
 8006036:	f7fe ff25 	bl	8004e84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800603a:	f7ff f917 	bl	800526c <xTaskResumeAll>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <prvProcessTimerOrBlockTask+0x98>)
 8006046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	f3bf 8f6f 	isb	sy
}
 8006054:	e001      	b.n	800605a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006056:	f7ff f909 	bl	800526c <xTaskResumeAll>
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200001f4 	.word	0x200001f4
 8006068:	200001f8 	.word	0x200001f8
 800606c:	e000ed04 	.word	0xe000ed04

08006070 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <prvGetNextExpireTime+0x44>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <prvGetNextExpireTime+0x16>
 8006082:	2201      	movs	r2, #1
 8006084:	e000      	b.n	8006088 <prvGetNextExpireTime+0x18>
 8006086:	2200      	movs	r2, #0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006094:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <prvGetNextExpireTime+0x44>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e001      	b.n	80060a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060a4:	68fb      	ldr	r3, [r7, #12]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	200001f0 	.word	0x200001f0

080060b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060c0:	f7ff f970 	bl	80053a4 <xTaskGetTickCount>
 80060c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060c6:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <prvSampleTimeNow+0x3c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d205      	bcs.n	80060dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060d0:	f000 f918 	bl	8006304 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e002      	b.n	80060e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <prvSampleTimeNow+0x3c>)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060e8:	68fb      	ldr	r3, [r7, #12]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000200 	.word	0x20000200

080060f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d812      	bhi.n	8006144 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e01b      	b.n	800616a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006132:	4b10      	ldr	r3, [pc, #64]	; (8006174 <prvInsertTimerInActiveList+0x7c>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f7fd fffd 	bl	800413c <vListInsert>
 8006142:	e012      	b.n	800616a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d206      	bcs.n	800615a <prvInsertTimerInActiveList+0x62>
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e007      	b.n	800616a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <prvInsertTimerInActiveList+0x80>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3304      	adds	r3, #4
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7fd ffe9 	bl	800413c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800616a:	697b      	ldr	r3, [r7, #20]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	200001f4 	.word	0x200001f4
 8006178:	200001f0 	.word	0x200001f0

0800617c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	; 0x30
 8006180:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006182:	e0ac      	b.n	80062de <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f2c0 80a8 	blt.w	80062dc <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	3304      	adds	r3, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe f806 	bl	80041ae <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff ff87 	bl	80060b8 <prvSampleTimeNow>
 80061aa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b09      	cmp	r3, #9
 80061b0:	f200 8095 	bhi.w	80062de <prvProcessReceivedCommands+0x162>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <prvProcessReceivedCommands+0x40>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	08006257 	.word	0x08006257
 80061cc:	0800626b 	.word	0x0800626b
 80061d0:	080062b3 	.word	0x080062b3
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061e5 	.word	0x080061e5
 80061dc:	08006257 	.word	0x08006257
 80061e0:	0800626b 	.word	0x0800626b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	18d1      	adds	r1, r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a3a      	ldr	r2, [r7, #32]
 8006202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006204:	f7ff ff78 	bl	80060f8 <prvInsertTimerInActiveList>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d067      	beq.n	80062de <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006214:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d05c      	beq.n	80062de <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	441a      	add	r2, r3
 800622c:	2300      	movs	r3, #0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2300      	movs	r3, #0
 8006232:	2100      	movs	r1, #0
 8006234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006236:	f7ff fe23 	bl	8005e80 <xTimerGenericCommand>
 800623a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d14d      	bne.n	80062de <prvProcessReceivedCommands+0x162>
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	e7fe      	b.n	8006254 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8006268:	e039      	b.n	80062de <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	b2da      	uxtb	r2, r3
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <prvProcessReceivedCommands+0x122>
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e7fe      	b.n	800629c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	18d1      	adds	r1, r2, r3
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ac:	f7ff ff24 	bl	80060f8 <prvInsertTimerInActiveList>
					break;
 80062b0:	e015      	b.n	80062de <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80062c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c2:	f000 fbbf 	bl	8006a44 <vPortFree>
 80062c6:	e00a      	b.n	80062de <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062da:	e000      	b.n	80062de <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <prvProcessReceivedCommands+0x184>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f107 0108 	add.w	r1, r7, #8
 80062e6:	2200      	movs	r2, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe fa97 	bl	800481c <xQueueReceive>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f47f af47 	bne.w	8006184 <prvProcessReceivedCommands+0x8>
	}
}
 80062f6:	bf00      	nop
 80062f8:	3728      	adds	r7, #40	; 0x28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200001f8 	.word	0x200001f8

08006304 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800630a:	e047      	b.n	800639c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006316:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3304      	adds	r3, #4
 8006324:	4618      	mov	r0, r3
 8006326:	f7fd ff42 	bl	80041ae <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d02d      	beq.n	800639c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d90e      	bls.n	8006370 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800635e:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4619      	mov	r1, r3
 8006368:	4610      	mov	r0, r2
 800636a:	f7fd fee7 	bl	800413c <vListInsert>
 800636e:	e015      	b.n	800639c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	2100      	movs	r1, #0
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff fd80 	bl	8005e80 <xTimerGenericCommand>
 8006380:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <prvSwitchTimerLists+0x98>
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	e7fe      	b.n	800639a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1b2      	bne.n	800630c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <prvSwitchTimerLists+0xc4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <prvSwitchTimerLists+0xc0>)
 80063b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063b4:	4a04      	ldr	r2, [pc, #16]	; (80063c8 <prvSwitchTimerLists+0xc4>)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	6013      	str	r3, [r2, #0]
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	200001f0 	.word	0x200001f0
 80063c8:	200001f4 	.word	0x200001f4

080063cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063d0:	f000 f95c 	bl	800668c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063d4:	4b12      	ldr	r3, [pc, #72]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d11d      	bne.n	8006418 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80063dc:	4811      	ldr	r0, [pc, #68]	; (8006424 <prvCheckForValidListAndQueue+0x58>)
 80063de:	f7fd fe5c 	bl	800409a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063e2:	4811      	ldr	r0, [pc, #68]	; (8006428 <prvCheckForValidListAndQueue+0x5c>)
 80063e4:	f7fd fe59 	bl	800409a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063e8:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvCheckForValidListAndQueue+0x60>)
 80063ea:	4a0e      	ldr	r2, [pc, #56]	; (8006424 <prvCheckForValidListAndQueue+0x58>)
 80063ec:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <prvCheckForValidListAndQueue+0x64>)
 80063f0:	4a0d      	ldr	r2, [pc, #52]	; (8006428 <prvCheckForValidListAndQueue+0x5c>)
 80063f2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80063f4:	2200      	movs	r2, #0
 80063f6:	210c      	movs	r1, #12
 80063f8:	200a      	movs	r0, #10
 80063fa:	f7fd ff6b 	bl	80042d4 <xQueueGenericCreate>
 80063fe:	4602      	mov	r2, r0
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 8006402:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <prvCheckForValidListAndQueue+0x54>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4908      	ldr	r1, [pc, #32]	; (8006434 <prvCheckForValidListAndQueue+0x68>)
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fd0e 	bl	8004e34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006418:	f000 f966 	bl	80066e8 <vPortExitCritical>
}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}
 8006420:	200001f8 	.word	0x200001f8
 8006424:	200001c8 	.word	0x200001c8
 8006428:	200001dc 	.word	0x200001dc
 800642c:	200001f0 	.word	0x200001f0
 8006430:	200001f4 	.word	0x200001f4
 8006434:	08006e0c 	.word	0x08006e0c

08006438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3b04      	subs	r3, #4
 8006448:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b04      	subs	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3b04      	subs	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006468:	4a0c      	ldr	r2, [pc, #48]	; (800649c <pxPortInitialiseStack+0x64>)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b14      	subs	r3, #20
 8006472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b04      	subs	r3, #4
 800647e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f06f 0202 	mvn.w	r2, #2
 8006486:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3b20      	subs	r3, #32
 800648c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800648e:	68fb      	ldr	r3, [r7, #12]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	080064a1 	.word	0x080064a1

080064a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064aa:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <prvTaskExitError+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d009      	beq.n	80064c8 <prvTaskExitError+0x28>
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e7fe      	b.n	80064c6 <prvTaskExitError+0x26>
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064da:	bf00      	nop
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0fc      	beq.n	80064dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	2000000c 	.word	0x2000000c
	...

08006500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <pxCurrentTCBConst2>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	f380 8809 	msr	PSP, r0
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8811 	msr	BASEPRI, r0
 800651a:	4770      	bx	lr
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst2>:
 8006520:	2000009c 	.word	0x2000009c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006528:	4808      	ldr	r0, [pc, #32]	; (800654c <prvPortStartFirstTask+0x24>)
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	6800      	ldr	r0, [r0, #0]
 800652e:	f380 8808 	msr	MSP, r0
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8814 	msr	CONTROL, r0
 800653a:	b662      	cpsie	i
 800653c:	b661      	cpsie	f
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	df00      	svc	0
 8006548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800654a:	bf00      	nop
 800654c:	e000ed08 	.word	0xe000ed08

08006550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006556:	4b44      	ldr	r3, [pc, #272]	; (8006668 <xPortStartScheduler+0x118>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a44      	ldr	r2, [pc, #272]	; (800666c <xPortStartScheduler+0x11c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d109      	bne.n	8006574 <xPortStartScheduler+0x24>
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e7fe      	b.n	8006572 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006574:	4b3c      	ldr	r3, [pc, #240]	; (8006668 <xPortStartScheduler+0x118>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3d      	ldr	r2, [pc, #244]	; (8006670 <xPortStartScheduler+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d109      	bne.n	8006592 <xPortStartScheduler+0x42>
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e7fe      	b.n	8006590 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006592:	4b38      	ldr	r3, [pc, #224]	; (8006674 <xPortStartScheduler+0x124>)
 8006594:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	4b30      	ldr	r3, [pc, #192]	; (8006678 <xPortStartScheduler+0x128>)
 80065b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <xPortStartScheduler+0x12c>)
 80065bc:	2207      	movs	r2, #7
 80065be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065c0:	e009      	b.n	80065d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80065c2:	4b2e      	ldr	r3, [pc, #184]	; (800667c <xPortStartScheduler+0x12c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a2c      	ldr	r2, [pc, #176]	; (800667c <xPortStartScheduler+0x12c>)
 80065ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b80      	cmp	r3, #128	; 0x80
 80065e0:	d0ef      	beq.n	80065c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <xPortStartScheduler+0x12c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1c3 0307 	rsb	r3, r3, #7
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d009      	beq.n	8006602 <xPortStartScheduler+0xb2>
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	e7fe      	b.n	8006600 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006602:	4b1e      	ldr	r3, [pc, #120]	; (800667c <xPortStartScheduler+0x12c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	021b      	lsls	r3, r3, #8
 8006608:	4a1c      	ldr	r2, [pc, #112]	; (800667c <xPortStartScheduler+0x12c>)
 800660a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <xPortStartScheduler+0x12c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006614:	4a19      	ldr	r2, [pc, #100]	; (800667c <xPortStartScheduler+0x12c>)
 8006616:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	b2da      	uxtb	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <xPortStartScheduler+0x130>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a16      	ldr	r2, [pc, #88]	; (8006680 <xPortStartScheduler+0x130>)
 8006626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800662a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <xPortStartScheduler+0x130>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a13      	ldr	r2, [pc, #76]	; (8006680 <xPortStartScheduler+0x130>)
 8006632:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006636:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006638:	f000 f8d6 	bl	80067e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <xPortStartScheduler+0x134>)
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006642:	f000 f8f5 	bl	8006830 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <xPortStartScheduler+0x138>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <xPortStartScheduler+0x138>)
 800664c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006650:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006652:	f7ff ff69 	bl	8006528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006656:	f7fe ff6d 	bl	8005534 <vTaskSwitchContext>
	prvTaskExitError();
 800665a:	f7ff ff21 	bl	80064a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	e000ed00 	.word	0xe000ed00
 800666c:	410fc271 	.word	0x410fc271
 8006670:	410fc270 	.word	0x410fc270
 8006674:	e000e400 	.word	0xe000e400
 8006678:	20000204 	.word	0x20000204
 800667c:	20000208 	.word	0x20000208
 8006680:	e000ed20 	.word	0xe000ed20
 8006684:	2000000c 	.word	0x2000000c
 8006688:	e000ef34 	.word	0xe000ef34

0800668c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <vPortEnterCritical+0x54>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a0d      	ldr	r2, [pc, #52]	; (80066e0 <vPortEnterCritical+0x54>)
 80066ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <vPortEnterCritical+0x54>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d10e      	bne.n	80066d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <vPortEnterCritical+0x58>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <vPortEnterCritical+0x48>
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	e7fe      	b.n	80066d2 <vPortEnterCritical+0x46>
	}
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	2000000c 	.word	0x2000000c
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066ee:	4b11      	ldr	r3, [pc, #68]	; (8006734 <vPortExitCritical+0x4c>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d109      	bne.n	800670a <vPortExitCritical+0x22>
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e7fe      	b.n	8006708 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <vPortExitCritical+0x4c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3b01      	subs	r3, #1
 8006710:	4a08      	ldr	r2, [pc, #32]	; (8006734 <vPortExitCritical+0x4c>)
 8006712:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006714:	4b07      	ldr	r3, [pc, #28]	; (8006734 <vPortExitCritical+0x4c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d104      	bne.n	8006726 <vPortExitCritical+0x3e>
 800671c:	2300      	movs	r3, #0
 800671e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	2000000c 	.word	0x2000000c
	...

08006740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006740:	f3ef 8009 	mrs	r0, PSP
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <pxCurrentTCBConst>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f01e 0f10 	tst.w	lr, #16
 8006750:	bf08      	it	eq
 8006752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	6010      	str	r0, [r2, #0]
 800675c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006764:	f380 8811 	msr	BASEPRI, r0
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f7fe fee0 	bl	8005534 <vTaskSwitchContext>
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f380 8811 	msr	BASEPRI, r0
 800677c:	bc09      	pop	{r0, r3}
 800677e:	6819      	ldr	r1, [r3, #0]
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006786:	f01e 0f10 	tst.w	lr, #16
 800678a:	bf08      	it	eq
 800678c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006790:	f380 8809 	msr	PSP, r0
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	f3af 8000 	nop.w

080067a0 <pxCurrentTCBConst>:
 80067a0:	2000009c 	.word	0x2000009c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067c0:	f7fe fe00 	bl	80053c4 <xTaskIncrementTick>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <SysTick_Handler+0x3c>)
 80067cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <vPortSetupTimerInterrupt+0x34>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067f2:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <vPortSetupTimerInterrupt+0x38>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <vPortSetupTimerInterrupt+0x3c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a0a      	ldr	r2, [pc, #40]	; (8006828 <vPortSetupTimerInterrupt+0x40>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	099b      	lsrs	r3, r3, #6
 8006804:	4a09      	ldr	r2, [pc, #36]	; (800682c <vPortSetupTimerInterrupt+0x44>)
 8006806:	3b01      	subs	r3, #1
 8006808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800680a:	4b04      	ldr	r3, [pc, #16]	; (800681c <vPortSetupTimerInterrupt+0x34>)
 800680c:	2207      	movs	r2, #7
 800680e:	601a      	str	r2, [r3, #0]
}
 8006810:	bf00      	nop
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	e000e010 	.word	0xe000e010
 8006820:	e000e018 	.word	0xe000e018
 8006824:	20000000 	.word	0x20000000
 8006828:	10624dd3 	.word	0x10624dd3
 800682c:	e000e014 	.word	0xe000e014

08006830 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006830:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006840 <vPortEnableVFP+0x10>
 8006834:	6801      	ldr	r1, [r0, #0]
 8006836:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800683a:	6001      	str	r1, [r0, #0]
 800683c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800683e:	bf00      	nop
 8006840:	e000ed88 	.word	0xe000ed88

08006844 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800684a:	f3ef 8305 	mrs	r3, IPSR
 800684e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b0f      	cmp	r3, #15
 8006854:	d913      	bls.n	800687e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <vPortValidateInterruptPriority+0x6c>)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006860:	4b14      	ldr	r3, [pc, #80]	; (80068b4 <vPortValidateInterruptPriority+0x70>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	7afa      	ldrb	r2, [r7, #11]
 8006866:	429a      	cmp	r2, r3
 8006868:	d209      	bcs.n	800687e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	e7fe      	b.n	800687c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <vPortValidateInterruptPriority+0x74>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006886:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <vPortValidateInterruptPriority+0x78>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d909      	bls.n	80068a2 <vPortValidateInterruptPriority+0x5e>
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	e7fe      	b.n	80068a0 <vPortValidateInterruptPriority+0x5c>
	}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000e3f0 	.word	0xe000e3f0
 80068b4:	20000204 	.word	0x20000204
 80068b8:	e000ed0c 	.word	0xe000ed0c
 80068bc:	20000208 	.word	0x20000208

080068c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068cc:	f7fe fcc0 	bl	8005250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068d0:	4b57      	ldr	r3, [pc, #348]	; (8006a30 <pvPortMalloc+0x170>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068d8:	f000 f90c 	bl	8006af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068dc:	4b55      	ldr	r3, [pc, #340]	; (8006a34 <pvPortMalloc+0x174>)
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 808c 	bne.w	8006a02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01c      	beq.n	800692a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80068f0:	2208      	movs	r2, #8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d013      	beq.n	800692a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f023 0307 	bic.w	r3, r3, #7
 8006908:	3308      	adds	r3, #8
 800690a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <pvPortMalloc+0x6a>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e7fe      	b.n	8006928 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d068      	beq.n	8006a02 <pvPortMalloc+0x142>
 8006930:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <pvPortMalloc+0x178>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d863      	bhi.n	8006a02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800693a:	4b40      	ldr	r3, [pc, #256]	; (8006a3c <pvPortMalloc+0x17c>)
 800693c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800693e:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <pvPortMalloc+0x17c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006944:	e004      	b.n	8006950 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d903      	bls.n	8006962 <pvPortMalloc+0xa2>
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f1      	bne.n	8006946 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006962:	4b33      	ldr	r3, [pc, #204]	; (8006a30 <pvPortMalloc+0x170>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	429a      	cmp	r2, r3
 800696a:	d04a      	beq.n	8006a02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2208      	movs	r2, #8
 8006972:	4413      	add	r3, r2
 8006974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	2308      	movs	r3, #8
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	429a      	cmp	r2, r3
 800698c:	d91e      	bls.n	80069cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800698e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4413      	add	r3, r2
 8006994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <pvPortMalloc+0xf4>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	e7fe      	b.n	80069b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069c6:	69b8      	ldr	r0, [r7, #24]
 80069c8:	f000 f8f6 	bl	8006bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069cc:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <pvPortMalloc+0x178>)
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <pvPortMalloc+0x178>)
 80069d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069da:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <pvPortMalloc+0x178>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <pvPortMalloc+0x180>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d203      	bcs.n	80069ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <pvPortMalloc+0x178>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <pvPortMalloc+0x180>)
 80069ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <pvPortMalloc+0x174>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a02:	f7fe fc33 	bl	800526c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <pvPortMalloc+0x164>
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	e7fe      	b.n	8006a22 <pvPortMalloc+0x162>
	return pvReturn;
 8006a24:	69fb      	ldr	r3, [r7, #28]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3728      	adds	r7, #40	; 0x28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000ca14 	.word	0x2000ca14
 8006a34:	2000ca20 	.word	0x2000ca20
 8006a38:	2000ca18 	.word	0x2000ca18
 8006a3c:	2000ca0c 	.word	0x2000ca0c
 8006a40:	2000ca1c 	.word	0x2000ca1c

08006a44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d046      	beq.n	8006ae4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a56:	2308      	movs	r3, #8
 8006a58:	425b      	negs	r3, r3
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	4b20      	ldr	r3, [pc, #128]	; (8006aec <vPortFree+0xa8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <vPortFree+0x42>
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e7fe      	b.n	8006a84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <vPortFree+0x5e>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	e7fe      	b.n	8006aa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4b11      	ldr	r3, [pc, #68]	; (8006aec <vPortFree+0xa8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d019      	beq.n	8006ae4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <vPortFree+0xa8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ac8:	f7fe fbc2 	bl	8005250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <vPortFree+0xac>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	4a06      	ldr	r2, [pc, #24]	; (8006af0 <vPortFree+0xac>)
 8006ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f000 f86c 	bl	8006bb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ae0:	f7fe fbc4 	bl	800526c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ae4:	bf00      	nop
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	2000ca20 	.word	0x2000ca20
 8006af0:	2000ca18 	.word	0x2000ca18

08006af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006afa:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8006afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b00:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <prvHeapInit+0xac>)
 8006b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3307      	adds	r3, #7
 8006b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <prvHeapInit+0xac>)
 8006b24:	4413      	add	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <prvHeapInit+0xb0>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <prvHeapInit+0xb0>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b40:	2208      	movs	r2, #8
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b5e:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	1ad2      	subs	r2, r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <prvHeapInit+0xb4>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <prvHeapInit+0xb8>)
 8006b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <prvHeapInit+0xbc>)
 8006b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b8c:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <prvHeapInit+0xc0>)
 8006b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b92:	601a      	str	r2, [r3, #0]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	2000020c 	.word	0x2000020c
 8006ba4:	2000ca0c 	.word	0x2000ca0c
 8006ba8:	2000ca14 	.word	0x2000ca14
 8006bac:	2000ca1c 	.word	0x2000ca1c
 8006bb0:	2000ca18 	.word	0x2000ca18
 8006bb4:	2000ca20 	.word	0x2000ca20

08006bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bc0:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <prvInsertBlockIntoFreeList+0xac>)
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e002      	b.n	8006bcc <prvInsertBlockIntoFreeList+0x14>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d8f7      	bhi.n	8006bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4413      	add	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d108      	bne.n	8006bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	441a      	add	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d118      	bne.n	8006c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <prvInsertBlockIntoFreeList+0xb0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d00d      	beq.n	8006c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	441a      	add	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e008      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <prvInsertBlockIntoFreeList+0xb0>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	e003      	b.n	8006c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d002      	beq.n	8006c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000ca0c 	.word	0x2000ca0c
 8006c68:	2000ca14 	.word	0x2000ca14

08006c6c <__cxa_pure_virtual>:
 8006c6c:	b508      	push	{r3, lr}
 8006c6e:	f000 f80f 	bl	8006c90 <_ZSt9terminatev>

08006c72 <_ZdlPvj>:
 8006c72:	f7f9 bce3 	b.w	800063c <_ZdlPv>

08006c76 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006c76:	b508      	push	{r3, lr}
 8006c78:	4780      	blx	r0
 8006c7a:	f000 f80e 	bl	8006c9a <abort>
	...

08006c80 <_ZSt13get_terminatev>:
 8006c80:	4b02      	ldr	r3, [pc, #8]	; (8006c8c <_ZSt13get_terminatev+0xc>)
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	f3bf 8f5b 	dmb	ish
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000010 	.word	0x20000010

08006c90 <_ZSt9terminatev>:
 8006c90:	b508      	push	{r3, lr}
 8006c92:	f7ff fff5 	bl	8006c80 <_ZSt13get_terminatev>
 8006c96:	f7ff ffee 	bl	8006c76 <_ZN10__cxxabiv111__terminateEPFvvE>

08006c9a <abort>:
 8006c9a:	b508      	push	{r3, lr}
 8006c9c:	2006      	movs	r0, #6
 8006c9e:	f000 f869 	bl	8006d74 <raise>
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f7f9 feae 	bl	8000a04 <_exit>

08006ca8 <__errno>:
 8006ca8:	4b01      	ldr	r3, [pc, #4]	; (8006cb0 <__errno+0x8>)
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	20000014 	.word	0x20000014

08006cb4 <__libc_init_array>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4e0d      	ldr	r6, [pc, #52]	; (8006cec <__libc_init_array+0x38>)
 8006cb8:	4c0d      	ldr	r4, [pc, #52]	; (8006cf0 <__libc_init_array+0x3c>)
 8006cba:	1ba4      	subs	r4, r4, r6
 8006cbc:	10a4      	asrs	r4, r4, #2
 8006cbe:	2500      	movs	r5, #0
 8006cc0:	42a5      	cmp	r5, r4
 8006cc2:	d109      	bne.n	8006cd8 <__libc_init_array+0x24>
 8006cc4:	4e0b      	ldr	r6, [pc, #44]	; (8006cf4 <__libc_init_array+0x40>)
 8006cc6:	4c0c      	ldr	r4, [pc, #48]	; (8006cf8 <__libc_init_array+0x44>)
 8006cc8:	f000 f870 	bl	8006dac <_init>
 8006ccc:	1ba4      	subs	r4, r4, r6
 8006cce:	10a4      	asrs	r4, r4, #2
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	42a5      	cmp	r5, r4
 8006cd4:	d105      	bne.n	8006ce2 <__libc_init_array+0x2e>
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006cdc:	4798      	blx	r3
 8006cde:	3501      	adds	r5, #1
 8006ce0:	e7ee      	b.n	8006cc0 <__libc_init_array+0xc>
 8006ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce6:	4798      	blx	r3
 8006ce8:	3501      	adds	r5, #1
 8006cea:	e7f2      	b.n	8006cd2 <__libc_init_array+0x1e>
 8006cec:	08006e64 	.word	0x08006e64
 8006cf0:	08006e64 	.word	0x08006e64
 8006cf4:	08006e64 	.word	0x08006e64
 8006cf8:	08006e68 	.word	0x08006e68

08006cfc <memcpy>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	1e43      	subs	r3, r0, #1
 8006d00:	440a      	add	r2, r1
 8006d02:	4291      	cmp	r1, r2
 8006d04:	d100      	bne.n	8006d08 <memcpy+0xc>
 8006d06:	bd10      	pop	{r4, pc}
 8006d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d10:	e7f7      	b.n	8006d02 <memcpy+0x6>

08006d12 <memset>:
 8006d12:	4402      	add	r2, r0
 8006d14:	4603      	mov	r3, r0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d100      	bne.n	8006d1c <memset+0xa>
 8006d1a:	4770      	bx	lr
 8006d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d20:	e7f9      	b.n	8006d16 <memset+0x4>

08006d22 <_raise_r>:
 8006d22:	291f      	cmp	r1, #31
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4604      	mov	r4, r0
 8006d28:	460d      	mov	r5, r1
 8006d2a:	d904      	bls.n	8006d36 <_raise_r+0x14>
 8006d2c:	2316      	movs	r3, #22
 8006d2e:	6003      	str	r3, [r0, #0]
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	bd38      	pop	{r3, r4, r5, pc}
 8006d36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d38:	b112      	cbz	r2, 8006d40 <_raise_r+0x1e>
 8006d3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d3e:	b94b      	cbnz	r3, 8006d54 <_raise_r+0x32>
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 f831 	bl	8006da8 <_getpid_r>
 8006d46:	462a      	mov	r2, r5
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d50:	f000 b818 	b.w	8006d84 <_kill_r>
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d00a      	beq.n	8006d6e <_raise_r+0x4c>
 8006d58:	1c59      	adds	r1, r3, #1
 8006d5a:	d103      	bne.n	8006d64 <_raise_r+0x42>
 8006d5c:	2316      	movs	r3, #22
 8006d5e:	6003      	str	r3, [r0, #0]
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7e7      	b.n	8006d34 <_raise_r+0x12>
 8006d64:	2400      	movs	r4, #0
 8006d66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	4798      	blx	r3
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e7e0      	b.n	8006d34 <_raise_r+0x12>
	...

08006d74 <raise>:
 8006d74:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <raise+0xc>)
 8006d76:	4601      	mov	r1, r0
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	f7ff bfd2 	b.w	8006d22 <_raise_r>
 8006d7e:	bf00      	nop
 8006d80:	20000014 	.word	0x20000014

08006d84 <_kill_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4c07      	ldr	r4, [pc, #28]	; (8006da4 <_kill_r+0x20>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	f7f9 fe27 	bl	80009e4 <_kill>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	d102      	bne.n	8006da0 <_kill_r+0x1c>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	b103      	cbz	r3, 8006da0 <_kill_r+0x1c>
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	bd38      	pop	{r3, r4, r5, pc}
 8006da2:	bf00      	nop
 8006da4:	2000cb40 	.word	0x2000cb40

08006da8 <_getpid_r>:
 8006da8:	f7f9 be14 	b.w	80009d4 <_getpid>

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
